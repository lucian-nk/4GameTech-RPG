//Nex-AC by Nexius v1.8.5 (0.3.7-R2)

#if defined _nex_ac_included
	#endinput
#endif
#define _nex_ac_included

#include <a_samp>

#if !defined GetConsoleVarAsInt
	#error Please download SA-MP 0.3.7 R2 server package!
#endif

#if !defined FILTERSCRIPT

//#define DEBUG

#include <nex-ac_en.lang>	//Localization

#define	NEX_AC_VERSION				"1.8.5"
#define AC_SERVER_VERSION			"0.3.7-R2"

#define AC_CONFIG_FILE				"nex-ac_settings.cfg"
#define AC_MAX_CLASSES				319
#define AC_DEFAULT_COLOR			-1

#define AC_USE_VENDING_MACHINES		true
#define AC_USE_TUNING_GARAGES		true
#define AC_USE_AMMUNATIONS			true
#define AC_USE_RESTAURANTS			true
#define AC_USE_PAYNSPRAY			true
#define AC_USE_CASINOS				true

#define AC_USE_QUERY				true

#define AC_MAX_CONNECTS_FROM_IP		1
#define AC_MAX_RCON_LOGIN_ATTEMPT	1
#define AC_MAX_MSGS_REC_DIFF		799
#define AC_MAX_PING					500
#define AC_MIN_TIME_RECONNECT		12		//In seconds

#define AC_MAX_NOP_WARNINGS			1
#define AC_MAX_PING_WARNINGS		1
#define AC_MAX_AIR_WARNINGS			2
#define AC_MAX_AIR_VEH_WARNINGS		2
#define AC_MAX_FLYHACK_VEH_WARNINGS	3
#define AC_MAX_FLYHACK_B_WARNINGS	5
#define AC_MAX_CARSHOT_WARNINGS		3
#define AC_MAX_PRO_AIM_WARNINGS		2
#define AC_MAX_AFK_GHOST_WARNINGS	2
#define AC_MAX_RAPID_FIRE_WARNINGS	2
#define AC_MAX_GODMODE_WARNINGS		2
#define AC_MAX_GODMODE_VEH_WARNINGS	2
#define AC_MAX_SILENT_AIM_WARNINGS	2

#define ac_GetSpeed(%0,%1,%2) floatround(VectorSize(%0, %1, %2) * 179.28625)
#define ac_fpublic:%0(%1) forward %0(%1); public %0(%1)
#define ac_abs(%1) (((%1) < 0) ? (-(%1)) : ((%1)))

static bool:ac_ACAllow[] =
{
	true,	//0 Anti-AirBreak (onfoot)
	true,	//1 Anti-AirBreak (in vehicle)
	true,	//2 Anti-teleport hack (onfoot)
	true,	//3 Anti-teleport hack (in vehicle)
	true,	//4 Anti-teleport hack (into/between vehicles)
	true,	//5 Anti-teleport hack (vehicle to player)
	true,	//6 Anti-teleport hack (pickups)
	true,	//7 Anti-FlyHack (onfoot)
	true,	//8 Anti-FlyHack (in vehicle)
	true,	//9 Anti-SpeedHack (onfoot)
	true,	//10 Anti-SpeedHack (in vehicle)
	true,	//11 Anti-Health hack (in vehicle)
	true,	//12 Anti-Health hack (onfoot)
	true,	//13 Anti-Armour hack
	true,	//14 Anti-Money hack
	true,	//15 Anti-Weapon hack
	true,	//16 Anti-Ammo hack (add)
	true,	//17 Anti-Ammo hack (infinite)
	true,	//18 Anti-Special actions hack
	true,	//19 Anti-GodMode from bullets (onfoot)
	true,	//20 Anti-GodMode from bullets (in vehicle)
	true,	//21 Anti-Invisible hack
	true,	//22 Anti-lagcomp-spoof
	true,	//23 Anti-Tuning hack
	true,	//24 Anti-Parkour mod
	true,	//25 Anti-Quick turn
	true,	//26 Anti-Rapid fire
	true,	//27 Anti-FakeSpawn
	true,	//28 Anti-FakeKill
	true,	//29 Anti-Pro Aim
	true,	//30 Anti-CJ run
	true,	//31 Anti-CarShot
	true,	//32 Anti-CarJack
	false,	//33 Anti-UnFreeze
	true,	//34 Anti-AFK Ghost
	true,	//35 Anti-Full Aiming

	true,	//36 Anti-Fake NPC
	true,	//37 Anti-Reconnect
	true,	//38 Anti-High ping
	true,	//39 Anti-Dialog hack
	true,	//40 Protection from the sandbox
	true,	//41 Protection against an invalid version
	true,	//42 Anti-Rcon hack

	true,	//43 Anti-Tuning crasher
	true,	//44 Anti-Invalid seat crasher
	true,	//45 Anti-Dialog crasher
	true,	//46 Anti-Attached object crasher
	true,	//47 Anti-Weapon Crasher

	true,	//48 Flood protection connects to one slot
	true,	//49 Anti-flood callback functions
	true,	//50 Anti-flood change seat

	true,	//51 Anti-Ddos

	true	//52 Anti-NOP's
};

static const ac_Mtfc[][] =
{
	{250, 3},	//0 OnDialogResponse
	{800, 2},	//1 OnEnterExitModShop
	{250, 3},	//2 OnPlayerClickMap
	{450, 2},	//3 OnPlayerClickPlayer
	{150, 3},	//4 OnPlayerClickTextDraw
	{400, 3},	//5 OnPlayerCommandText
	{150, 3},	//6 OnPlayerEnterVehicle
	{150, 3},	//7 OnPlayerExitVehicle
	{800, 5},	//8 OnPlayerPickUpPickup
	{150, 3},	//9 OnPlayerRequestClass
	{250, 3},	//10 OnPlayerSelectedMenuRow
	{600, 3},	//11 OnPlayerStateChange
	{530, 2},	//12 OnVehicleMod
	{530, 2},	//13 OnVehiclePaintjob
	{530, 2},	//14 OnVehicleRespray
	{300, 1},	//15 OnVehicleDeath
	{450, 2},	//16 OnPlayerText
	{500, 2},	//17 OnPlayerEnterCheckpoint
	{500, 2},	//18 OnPlayerLeaveCheckpoint
	{150, 3},	//19 OnPlayerRequestSpawn
	{250, 3},	//20 OnPlayerExitedMenu
	{500, 2},	//21 OnPlayerEnterRaceCheckpoint
	{500, 2},	//22 OnPlayerLeaveRaceCheckpoint
	{150, 3},	//23 OnPlayerClickPlayerTextDraw
	{51, 9},	//24 OnVehicleDamageStatusUpdate
	{150, 5},	//25 OnVehicleSirenStateChange
	{150, 3},	//26 OnPlayerSelectObject
	{150, 3}	//27 Cross-public
},

ac_WeaponSlots[] =
{
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10,
	10, 8, 8, 8, -1, -1, -1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5,
	4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
},

ac_WeaponModels[] =
{
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325,
	326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356,
	372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371
},

ac_VehicleTypes[] =
{
	2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 3, 3, 3, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 0, 0, 2,
	0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 2, 2, 0, 0, 0,
	0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3
},

ac_ComponentPrices[] =
{
	400, 550, 200, 250, 100, 150, 80, 500, 500, 200, 1000, 220, 250, 100, 400,
	500, 200, 500, 350, 300, 250, 200, 150, 350, 50, 1000, 480, 0, 770, 680, 0,
	370, 170, 120, 790, 150, 500, 690, 190, 390, 0, 0, 1000, 500, 500, 510, 710,
	670, 530, 810, 620, 0, 0, 130, 210, 230, 520, 430, 620, 720, 530, 180, 0, 0,
	830, 850, 750, 250, 200, 550, 450, 0, 0, 1100, 1030, 980, 1560, 1620, 1200,
	1030, 900, 1230, 820, 1560, 1350, 770, 100, 1500, 150, 650, 450, 100, 750,
	350, 0, 0, 1000, 620, 1140, 0, 940, 0, 0, 3250, 1610, 1540, 780, 0, 780,
	1610, 1540, 0, 0, 3340, 3250, 2130, 2050, 2040, 780, 940, 0, 0, 780, 860,
	0, 1120, 3340, 3250, 3340, 1650, 3380, 3290, 1590, 830, 800, 1500, 1000, 0,
	580, 470, 870, 980, 0, 150, 0, 100, 490, 600, 890, 1000, 1090, 840, 910,
	1200, 1030, 1030, 920, 930, 550, 1050, 1050, 950, 650, 450, 550, 850, 950,
	850, 950, 970, 880, 990, 900, 950, 1000, 900, 1000, 900, 2050, 2150, 2130,
	2050, 2130, 2040, 2150, 2040, 2095, 2175, 2080, 2200, 1200, 1040, 940, 1100
},

ac_MaxPassengers[] =
{
	0x10331113, 0x11311131, 0x11331313, 0x80133301, 0x1381F110,
	0x10311103, 0x10001F10, 0x11113311, 0x13113311, 0x31101100,
	0x30001301, 0x11031311, 0x11111331, 0x10013111, 0x01131100,
	0x11111110, 0x11100031, 0x11130221, 0x33113311, 0x11111101,
	0x33101133, 0x101001F0, 0x03133111, 0xFF11113F, 0x13330111,
	0xFF131111, 0x0000FF3F
},

ac_VehicleMods[][] =
{
	{0b00000011001111000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000110100010011111111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001110110010011110000101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111000100011100000011, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011101110100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100011100000011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001100010000011101000100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001010000000011100111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111010100011100000001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001110100010011110000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001010000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010011110100010011111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100000100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111100000011111000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011011100000011011100110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011000111010010011101110101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111100100011110001000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000010000011101110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100110100000111111001110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011001110000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111111000011110010101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111110000011110001100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010100101100010011111101010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001101101100011110000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111100001111111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b11111100000000000000010000110111, 0b00000000000000000000000000000000, 0b00000010000111000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000011111111100110000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000001101110000111, 0b00000000000000000000000000000001, 0b00000001111000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100111100000011111010010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111001100011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100011100000011111010110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111010000011100001001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111100001111110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111010000011101101100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b11111111111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000111111000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111111111110, 0b00000000000000000000000000000111, 0b11000000000000000000000000000000, 0b00000000000000000010000000000111},
	{0b11111110000000000000011100000000, 0b00000000000000000000000000000011, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000011110000000000, 0b00000000000000000000011000000000},
	{0b11001110000000000000011100000000, 0b11111111100000000000000000000000, 0b00000000111111111111111000000001, 0b00000000000000000000000000000111, 0b00111100000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000001111111100, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000001111000000000000000000, 0b00000000000000000001100000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000011111111110000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000011110000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000001000111, 0b00000000000000000000000000111110, 0b00111100000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000001110000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000001111, 0b00000000000000000000000000000000, 0b00000000000000111100000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000001111000000, 0b11000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100101100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011000101110010011111110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010010101100010011111110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100111100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000}
},

#if AC_USE_AMMUNATIONS
	ac_AmmuNationInfo[][] =
	{
		{200, 30}, {600, 30}, {1200, 10},
		{600, 15}, {800, 12}, {1000, 10},
		{500, 60}, {2000, 90}, {3500, 120},
		{4500, 90}, {300, 60}
	},

	Float:ac_AmmuNations[][] =
	{
		{296.5541, -38.5138, 1001.5156},
		{295.7008, -80.8109, 1001.5156},
		{290.1963, -109.7721, 1001.5156},
		{312.2592, -166.1385, 999.601}
	},
#endif

#if AC_USE_RESTAURANTS
	Float:ac_Restaurants[][] =
	{
		{374.0, -119.641, 1001.4922},
		{368.789, -6.857, 1001.8516},
		{375.566, -68.222, 1001.5151}
	},
#endif

#if AC_USE_PAYNSPRAY
	Float:ac_PayNSpray[][] =
	{
		{2064.2842, -1831.4736, 13.5469},
		{-2425.7822, 1022.1392, 50.3977},
		{-1420.5195, 2584.2305, 55.8433},
		{487.6401, -1739.9479, 11.1385},
		{1024.8651, -1024.087, 32.1016},
		{-1904.7019, 284.5968, 41.0469},
		{1975.2384, 2162.5088, 11.0703},
		{2393.4456, 1491.5537, 10.5616},
		{720.0854, -457.8807, 16.3359},
		{-99.9417, 1117.9048, 19.7417}
	},
#endif

#if AC_USE_VENDING_MACHINES
	Float:ac_VendingMachines[][] =
	{
		{-862.82, 1536.6, 21.98},
		{2271.72, -76.46, 25.96},
		{1277.83, 372.51, 18.95},
		{662.42, -552.16, 15.71},
		{201.01, -107.61, 0.89},
		{-253.74, 2597.95, 62.24},
		{-253.74, 2599.75, 62.24},
		{-76.03, 1227.99, 19.12},
		{-14.7, 1175.35, 18.95},
		{-1455.11, 2591.66, 55.23},
		{2352.17, -1357.15, 23.77},
		{2325.97, -1645.13, 14.21},
		{2139.51, -1161.48, 23.35},
		{2153.23, -1016.14, 62.23},
		{1928.73, -1772.44, 12.94},
		{1154.72, -1460.89, 15.15},
		{2480.85, -1959.27, 12.96},
		{2060.11, -1897.64, 12.92},
		{1729.78, -1943.04, 12.94},
		{1634.1, -2237.53, 12.89},
		{1789.21, -1369.26, 15.16},
		{-2229.18, 286.41, 34.7},
		{2319.99, 2532.85, 10.21},
		{2845.72, 1295.04, 10.78},
		{2503.14, 1243.69, 10.21},
		{2647.69, 1129.66, 10.21},
		{-2420.21, 984.57, 44.29},
		{-2420.17, 985.94, 44.29},
		{2085.77, 2071.35, 10.45},
		{1398.84, 2222.6, 10.42},
		{1659.46, 1722.85, 10.21},
		{1520.14, 1055.26, 10.0},
		{-1980.78, 142.66, 27.07},
		{-2118.96, -423.64, 34.72},
		{-2118.61, -422.41, 34.72},
		{-2097.27, -398.33, 34.72},
		{-2092.08, -490.05, 34.72},
		{-2063.27, -490.05, 34.72},
		{-2005.64, -490.05, 34.72},
		{-2034.46, -490.05, 34.72},
		{-2068.56, -398.33, 34.72},
		{-2039.85, -398.33, 34.72},
		{-2011.14, -398.33, 34.72},
		{-1350.11, 492.28, 10.58},
		{-1350.11, 493.85, 10.58},
		{2222.36, 1602.64, 1000.06},
		{2222.2, 1606.77, 1000.05},
		{2155.9, 1606.77, 1000.05},
		{2155.84, 1607.87, 1000.06},
		{2209.9, 1607.19, 1000.05},
		{2202.45, 1617.0, 1000.06},
		{2209.24, 1621.21, 1000.06},
		{2576.7, -1284.43, 1061.09},
		{330.67, 178.5, 1020.07},
		{331.92, 178.5, 1020.07},
		{350.9, 206.08, 1008.47},
		{361.56, 158.61, 1008.47},
		{371.59, 178.45, 1020.07},
		{374.89, 188.97, 1008.47},
		{-19.03, -57.83, 1003.63},
		{-36.14, -57.87, 1003.63},
		{316.87, -140.35, 998.58},
		{2225.2, -1153.42, 1025.9},
		{-15.1, -140.22, 1003.63},
		{-16.53, -140.29, 1003.63},
		{-35.72, -140.22, 1003.63},
		{373.82, -178.14, 1000.73},
		{379.03, -178.88, 1000.73},
		{495.96, -24.32, 1000.73},
		{500.56, -1.36, 1000.73},
		{501.82, -1.42, 1000.73},
		{-33.87, -186.76, 1003.63},
		{-32.44, -186.69, 1003.63},
		{-16.11, -91.64, 1003.63},
		{-17.54, -91.71, 1003.63}
	},
#endif

#if AC_USE_CASINOS
	Float:ac_Casinos[][] =
	{
		{2241.2878, 1617.1624, 1006.1797, 2.0},
		{2240.9736, 1604.6592, 1006.1797, 6.0},
		{2242.5427, 1592.8726, 1006.1836, 6.0},
		{2230.2124, 1592.1426, 1006.1832, 6.0},
		{2230.4717, 1604.484, 1006.186, 6.0},
		{2230.3298, 1616.9272, 1006.1799, 3.0},
		{2251.9407, 1586.1736, 1006.186, 1.0},
		{2218.6785, 1587.3448, 1006.1749, 1.0},
		{2219.2773, 1591.7467, 1006.1867, 1.0},
		{2218.5408, 1589.3229, 1006.184, 1.0},
		{2218.6477, 1593.6279, 1006.1797, 1.0},
		{2221.926, 1603.8285, 1006.1797, 1.0},
		{2218.5095, 1603.8385, 1006.1797, 1.0},
		{2219.9597, 1603.9216, 1006.1797, 1.0},
		{2216.3054, 1603.7996, 1006.1819, 1.0},
		{2218.731, 1619.8046, 1006.1794, 1.0},
		{2218.9407, 1617.8413, 1006.1821, 1.0},
		{2218.668, 1615.4681, 1006.1797, 1.0},
		{2218.6418, 1613.2629, 1006.1797, 1.0},
		{2252.4272, 1589.8412, 1006.1797, 5.0},
		{2252.4229, 1596.6169, 1006.1797, 5.0},
		{2255.1565, 1608.8784, 1006.186, 1.0},
		{2254.8496, 1610.8605, 1006.1797, 1.0},
		{2255.2917, 1612.9167, 1006.1797, 1.0},
		{2255.033, 1614.8892, 1006.1797, 1.0},
		{2255.1213, 1616.8284, 1006.1797, 1.0},
		{2255.2161, 1618.8005, 1006.1797, 1.0},
		{2268.5281, 1606.4894, 1006.1797, 1.0},
		{2270.4922, 1606.8539, 1006.1797, 1.0},
		{2272.5693, 1606.4473, 1006.1797, 1.0},
		{2274.5391, 1607.0122, 1006.1797, 1.0},
		{2271.8447, 1586.1633, 1006.1797, 1.0},
		{2261.4844, 1586.1724, 1006.1797, 1.0},
		{2257.4507, 1589.6555, 1006.1797, 5.0},
		{2267.8994, 1589.8672, 1006.1797, 5.0},
		{2262.8486, 1590.026, 1006.1797, 5.0},
		{2272.6458, 1589.7704, 1006.1797, 5.0},
		{2272.6533, 1596.5682, 1006.1797, 5.0},
		{2270.4895, 1596.4606, 1006.1797, 5.0},
		{2265.4441, 1596.4299, 1006.1797, 5.0},
		{2260.0308, 1596.7987, 1006.1797, 5.0},
		{2254.9907, 1596.241, 1006.1797, 5.0},
		{1956.9524, 988.2533, 992.4688, 2.0},
		{1961.6155, 993.0375, 992.4688, 2.0},
		{1963.7998, 998.4406, 992.4745, 2.0},
		{1936.2885, 987.1995, 992.4745, 2.0},
		{1944.9768, 986.3937, 992.4688, 2.0},
		{1940.7397, 990.9521, 992.4609, 2.0},
		{1940.0966, 1005.8996, 992.4688, 6.0},
		{1938.8785, 1014.1768, 992.4688, 6.0},
		{1938.8811, 1021.4434, 992.4688, 6.0},
		{1966.5975, 1006.6469, 992.4745, 6.0},
		{1966.5979, 1014.1024, 992.4688, 6.0},
		{1939.8351, 1029.912, 992.4688, 6.0},
		{1956.854, 1047.3718, 992.4688, 6.0},
		{1961.356, 1042.8112, 992.4688, 6.0},
		{1963.811, 1037.1263, 992.4745, 6.0},
		{1961.733, 1025.8929, 992.4688, 10.0},
		{1961.708, 1010.3194, 992.4688, 10.0},
		{1966.5989, 1029.7954, 992.4745, 6.0},
		{1961.4139, 1017.8281, 992.4688, 10.0},
		{1966.5985, 1021.7686, 992.4688, 6.0},
		{1128.7106, -1.9779, 1000.6797, 1.0},
		{1125.2388, 1.61, 1000.6797, 1.0},
		{1125.1249, -5.0489, 1000.6797, 1.0},
		{1127.4139, 3.0199, 1000.6797, 1.0},
		{1135.0634, -3.8695, 1000.6797, 1.0},
		{1135.0861, 0.6107, 1000.6797, 1.0},
		{1132.8943, -1.7139, 1000.6797, 1.0},
		{1125.3727, 3.0315, 1000.6797, 1.0},
		{1119.0272, -1.4916, 1000.6924, 1.0}
	},
#endif

ac_PickupAmmo[] =
{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 8, 8, 8, 0, 0, 0, 30, 10, 10, 15,
	10, 10, 60, 60, 80, 80, 60, 20, 10, 4, 3,
	100, 100, 5, 1, 500, 200, 32, 1, 1, 1
};

enum ACInfo
{
	Float:acPos[3],
	Float:acDropJP[3],
	Float:acSetPos[3],
	Float:acSetVehHealth,
	Float:acSpeed,
	acHealth,
	acArmour,
	acMoney,
	acClassid,
	acLastShot,
	acLastWeapon,
	acEnterVehTime,
	acEnterVeh,
	acVeh,
	acSeat,
	acDialog,
	acAnim,
	acReload,
	acDmgRes,
	acSpecAct,
	acNextSpecAct,
	acLastSpecAct,
	acLastPickup,
	acShotTime,
	acSpawnTime,
	acLastUpdate,
	acSpawnRes,
	acTimerID,
	acKicked,
	acIp[16],
	acSet[14],
	acGtc[18],
	acWeapon[13],
	acAmmo[13],
	acSetWeapon[13],
	acGiveAmmo[13],
	acSpawnWeapon[3],
	acSpawnAmmo[3],
	acGtcSetWeapon[13],
	acGtcGiveAmmo[13],
	acNOPCount[11],
	acCheatCount[15],
	acCall[sizeof ac_Mtfc],
	acFloodCount[sizeof ac_Mtfc],
	bool:acACAllow[sizeof ac_ACAllow],
	bool:acStuntBonus,
	bool:acModShop,
	bool:acFreeze,
	bool:acOnline,
	bool:acDeathRes,
	bool:acVehDmgRes,
	bool:acDead,
	bool:acTpToZ,
	bool:acPicked,
	bool:acParachute,
	bool:acIntEnterExits
}

enum ACVehInfo
{
	Float:acVel[3],
	Float:acSpeedDiff,
	Float:acPosDiff,
	Float:acZAngle,
	Float:acHealth,
	acDriver,
	acInt,
	acPaintJob,
	bool:acSpawned
}

enum ACPickInfo
{
	Float:acPos[3],
	acType,
	acWeapon,
	bool:acIsStatic
}

enum ACDPickInfo
{
	Float:acPos[3],
	acType,
	acWeapon
}

static
	ac_StatsInfo[6],
	ac_Class[AC_MAX_CLASSES][3][2],
	AntiCheatInfo[MAX_PLAYERS][ACInfo],
	AntiCheatVehInfo[MAX_VEHICLES][ACVehInfo],
	AntiCheatPickInfo[MAX_PICKUPS][ACPickInfo],
	AntiCheatDPickInfo[MAX_PICKUPS][ACDPickInfo],
	bool:ac_IntEnterExits = true,
	bool:ac_StuntBonus = true,
	bool:ac_VehFriendlyFire,
	bool:ac_LagCompMode,
	#if !AC_USE_QUERY
		bool:ac_QueryEnable,
	#endif
	bool:ac_RconEnable,
	bool:ac_PedAnims;

ac_fpublic: ac_AddStaticVehicle(vehicleid)
{
	AntiCheatVehInfo[vehicleid][acInt] = 0;
	AntiCheatVehInfo[vehicleid][acPaintJob] = 3;
	AntiCheatVehInfo[vehicleid][acSpawned] = true;
	AntiCheatVehInfo[vehicleid][acHealth] = 1000.0;
	AntiCheatVehInfo[vehicleid][acSpeedDiff] =
	AntiCheatVehInfo[vehicleid][acPosDiff] =
	AntiCheatVehInfo[vehicleid][acVel][0] =
	AntiCheatVehInfo[vehicleid][acVel][1] =
	AntiCheatVehInfo[vehicleid][acVel][2] = 0.0;
	AntiCheatVehInfo[vehicleid][acDriver] = 65535;
	return 1;
}

ac_fpublic: ac_CreateVehicle(vehicleid, vehicletype)
{
	AntiCheatVehInfo[vehicleid][acInt] = 0;
	AntiCheatVehInfo[vehicleid][acPaintJob] = 3;
	AntiCheatVehInfo[vehicleid][acHealth] = 1000.0;
	AntiCheatVehInfo[vehicleid][acSpeedDiff] =
	AntiCheatVehInfo[vehicleid][acPosDiff] =
	AntiCheatVehInfo[vehicleid][acVel][0] =
	AntiCheatVehInfo[vehicleid][acVel][1] =
	AntiCheatVehInfo[vehicleid][acVel][2] = 0.0;
	if(!(568 < vehicletype < 571)) AntiCheatVehInfo[vehicleid][acSpawned] = true;
	AntiCheatVehInfo[vehicleid][acDriver] = 65535;
	return 1;
}

ac_fpublic: ac_AddPlayerClass(classid, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	ac_Class[classid][0][0] = weapon1;
	ac_Class[classid][0][1] = weapon1_ammo;
	ac_Class[classid][1][0] = weapon2;
	ac_Class[classid][1][1] = weapon2_ammo;
	ac_Class[classid][2][0] = weapon3;
	ac_Class[classid][2][1] = weapon3_ammo;
	return 1;
}

ac_fpublic: ac_SetSpawnInfo(playerid, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	AntiCheatInfo[playerid][acSpawnWeapon][0] = weapon1;
	AntiCheatInfo[playerid][acSpawnAmmo][0] = weapon1_ammo;
	AntiCheatInfo[playerid][acSpawnWeapon][1] = weapon2;
	AntiCheatInfo[playerid][acSpawnAmmo][1] = weapon2_ammo;
	AntiCheatInfo[playerid][acSpawnWeapon][2] = weapon3;
	AntiCheatInfo[playerid][acSpawnAmmo][2] = weapon3_ammo;
	return 1;
}

ac_fpublic: ac_AddStaticPickup(pickupid, model, type, Float:X, Float:Y, Float:Z)
{
	AntiCheatPickInfo[pickupid][acWeapon] = 0;
	switch(type)
	{
		case 2, 3, 15, 22:
		{
			switch(model)
			{
				case 370: AntiCheatPickInfo[pickupid][acType] = 2;
				case 1240: AntiCheatPickInfo[pickupid][acType] = 3;
				case 1242: AntiCheatPickInfo[pickupid][acType] = 4;
				case 321..369, 371, 372:
				{
					for(new ac_i = 46; ac_i != -1; --ac_i)
					{
						if(ac_WeaponModels[ac_i] == model)
						{
							AntiCheatPickInfo[pickupid][acType] = 1;
							AntiCheatPickInfo[pickupid][acWeapon] = ac_i;
							break;
						}
					}
				}
			}
		}
	}
	AntiCheatPickInfo[pickupid][acIsStatic] = true;
	AntiCheatPickInfo[pickupid][acPos][0] = X;
	AntiCheatPickInfo[pickupid][acPos][1] = Y;
	AntiCheatPickInfo[pickupid][acPos][2] = Z;
	return 1;
}

ac_fpublic: ac_CreatePickup(pickupid, model, type, Float:X, Float:Y, Float:Z)
{
	AntiCheatPickInfo[pickupid][acWeapon] = 0;
	switch(type)
	{
		case 2, 3, 15, 22:
		{
			switch(model)
			{
				case 370: AntiCheatPickInfo[pickupid][acType] = 2;
				case 1240: AntiCheatPickInfo[pickupid][acType] = 3;
				case 1242: AntiCheatPickInfo[pickupid][acType] = 4;
				case 321..369, 371, 372:
				{
					for(new ac_i = 46; ac_i != -1; --ac_i)
					{
						if(ac_WeaponModels[ac_i] == model)
						{
							AntiCheatPickInfo[pickupid][acType] = 1;
							AntiCheatPickInfo[pickupid][acWeapon] = ac_i;
							break;
						}
					}
				}
			}
		}
	}
	AntiCheatPickInfo[pickupid][acIsStatic] = false;
	AntiCheatPickInfo[pickupid][acPos][0] = X;
	AntiCheatPickInfo[pickupid][acPos][1] = Y;
	AntiCheatPickInfo[pickupid][acPos][2] = Z;
	return 1;
}

#if defined STREAMER_ENABLE_TAGS
	ac_fpublic: STREAMER_TAG_PICKUP ac_CreateDynamicPickup(pickupid, modelid, type, Float:x, Float:y, Float:z)
#else
	ac_fpublic: ac_CreateDynamicPickup(pickupid, modelid, type, Float:x, Float:y, Float:z)
#endif
{
	if(pickupid < MAX_PICKUPS)
	{
		switch(type)
		{
			case 2, 3, 15, 22:
			{
				switch(modelid)
				{
					case 370: AntiCheatDPickInfo[pickupid][acType] = 2;
					case 1240: AntiCheatDPickInfo[pickupid][acType] = 3;
					case 1242: AntiCheatDPickInfo[pickupid][acType] = 4;
					case 321..369, 371, 372:
					{
						for(new ac_i = 46; ac_i != -1; --ac_i)
						{
							if(ac_WeaponModels[ac_i] == modelid)
							{
								AntiCheatDPickInfo[pickupid][acType] = 1;
								AntiCheatDPickInfo[pickupid][acWeapon] = ac_i;
								break;
							}
						}
					}
				}
			}
		}
		AntiCheatDPickInfo[pickupid][acPos][0] = x;
		AntiCheatDPickInfo[pickupid][acPos][1] = y;
		AntiCheatDPickInfo[pickupid][acPos][2] = z;
	}
	return 1;
}

ac_fpublic: ac_DestroyVehicle(vehicleid)
{
	AntiCheatVehInfo[vehicleid][acSpawned] = false;
	return 1;
}

ac_fpublic: ac_DestroyPickup(pickup)
{
	AntiCheatPickInfo[pickup][acType] = 0;
	return 1;
}

#if defined STREAMER_ENABLE_TAGS
	ac_fpublic: ac_DestroyDynamicPickup(STREAMER_TAG_PICKUP pickupid)
#else
	ac_fpublic: ac_DestroyDynamicPickup(pickupid)
#endif
{
	if(pickupid < MAX_PICKUPS) AntiCheatDPickInfo[pickupid][acType] = 0;
	return 1;
}

ac_fpublic: ac_DestroyAllDynamicPickups()
{
	#if defined Streamer_GetUpperBound
		#if defined STREAMER_ENABLE_TAGS
			new STREAMER_TAG_PICKUP ac_i;
		#else
			new ac_i;
		#endif
		if((ac_i = Streamer_GetUpperBound(1)) > MAX_PICKUPS - 1) ac_i = MAX_PICKUPS - 1;
	#else
		#if defined STREAMER_ENABLE_TAGS
			new STREAMER_TAG_PICKUP ac_i = MAX_PICKUPS;
		#else
			new ac_i = MAX_PICKUPS;
		#endif
	#endif
	for(; ac_i != -1; --ac_i)
	{
		AntiCheatDPickInfo[ac_i][acType] = 0;
	}
	return 1;
}

ac_fpublic: ac_DisableInteriorEnterExits()
{
	ac_IntEnterExits = false;
	return 1;
}

ac_fpublic: ac_UsePlayerPedAnims()
{
	ac_PedAnims = true;
	return 1;
}

ac_fpublic: ac_EnableVehicleFriendlyFire()
{
	ac_VehFriendlyFire = true;
	return 1;
}

ac_fpublic: ac_EnableStuntBonusForAll(enable)
{
	ac_StuntBonus = !!enable;
	#if defined foreach
		foreach(new ac_i : Player)
	#else
		for(new ac_i = GetPlayerPoolSize(); ac_i != -1; --ac_i)
		{
			if(IsPlayerConnected(ac_i))
	#endif
	{
		AntiCheatInfo[ac_i][acStuntBonus] = ac_StuntBonus;
	}
	#if !defined foreach
		}
	#endif
	return 1;
}

ac_fpublic: ac_EnableStuntBonusForPlayer(playerid, enable)
{
	AntiCheatInfo[playerid][acStuntBonus] = !!enable;
	return 1;
}

ac_fpublic: ac_ShowPlayerDialog(playerid, dialogid)
{
	AntiCheatInfo[playerid][acDialog] = dialogid;
	return 1;
}

ac_fpublic: ac_TogglePlayerControllable(playerid, toggle)
{
	AntiCheatInfo[playerid][acFreeze] = !!toggle;
	return 1;
}

ac_fpublic: ac_TogglePlayerSpectating(playerid, toggle)
{
	if(GetPlayerState(playerid) == 9)
	{
		if(!toggle) ac_SpawnPlayer(playerid);
	}
	else if(toggle)
	{
		AntiCheatInfo[playerid][acSet][6] = 1;
		AntiCheatInfo[playerid][acNOPCount][8] = 0;
		AntiCheatInfo[playerid][acGtc][12] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_SpawnPlayer(playerid)
{
	AntiCheatInfo[playerid][acSet][7] = 1;
	AntiCheatInfo[playerid][acSpawnRes]++;
	AntiCheatInfo[playerid][acSpawnTime] =
	AntiCheatInfo[playerid][acNOPCount][9] = 0;
	AntiCheatInfo[playerid][acGtc][13] = GetTickCount();
	return 1;
}

ac_fpublic: ac_SetPlayerHealth(playerid, Float:health)
{
	if(health < 0.0) health = 0.0;
	AntiCheatInfo[playerid][acNOPCount][3] = 0;
	AntiCheatInfo[playerid][acSet][1] = floatround(health, floatround_tozero);
	AntiCheatInfo[playerid][acGtc][3] = GetTickCount();
	return 1;
}

ac_fpublic: ac_SetPlayerArmour(playerid, Float:armour)
{
	if(armour < 0.0) armour = 0.0;
	AntiCheatInfo[playerid][acNOPCount][5] = 0;
	AntiCheatInfo[playerid][acSet][2] = floatround(armour, floatround_tozero);
	AntiCheatInfo[playerid][acGtc][5] = GetTickCount();
	return 1;
}

ac_fpublic: ac_GivePlayerWeapon(playerid, weaponid, ammo)
{
	AntiCheatInfo[playerid][acNOPCount][0] =
	AntiCheatInfo[playerid][acNOPCount][1] = 0;
	if(15 < weaponid < 44)
	{
		if(!(!AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] && !ammo))
		{
			if(2 < ac_WeaponSlots[weaponid] < 6
			|| (AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[weaponid]] == -1
			? AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[weaponid]]
			: AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[weaponid]]) == weaponid)
			{
				AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] =
				(AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] == -65535
				? AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]]
				: AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]]) + ammo;
			}
			else AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] = ammo;
			if(AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] < -32768) ammo =
			AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] = -32768;
			else if(AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] > 32767) ammo =
			AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] = 32767;
			AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[weaponid]] =
			AntiCheatInfo[playerid][acSet][3] = weaponid;
		}
	}
	else
	{
		AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponid]] = -65535;
		AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[weaponid]] =
		AntiCheatInfo[playerid][acSet][3] = weaponid;
	}
	GivePlayerWeapon(playerid, weaponid, ammo);
	AntiCheatInfo[playerid][acGtcGiveAmmo][ac_WeaponSlots[weaponid]] =
	AntiCheatInfo[playerid][acGtcSetWeapon][ac_WeaponSlots[weaponid]] =
	AntiCheatInfo[playerid][acGtc][2] = GetTickCount();
	return 1;
}

ac_fpublic: ac_SetPlayerAmmo(playerid, weaponslot, ammo)
{
	if(ammo < -32768) ammo = -32768;
	else if(ammo > 32767) ammo = 32767;
	SetPlayerAmmo(playerid, weaponslot, ammo);
	if(AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[weaponslot]]
	&& 15 < weaponslot < 44)
	{
		AntiCheatInfo[playerid][acNOPCount][1] = 0;
		AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[weaponslot]] = ammo;
		AntiCheatInfo[playerid][acGtcGiveAmmo][ac_WeaponSlots[weaponslot]] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_SetPlayerArmedWeapon(playerid, weaponid)
{
	if(weaponid == AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[weaponid]])
	{
		AntiCheatInfo[playerid][acNOPCount][0] = 0;
		AntiCheatInfo[playerid][acSet][3] = weaponid;
		AntiCheatInfo[playerid][acGtc][2] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_ResetPlayerWeapons(playerid)
{
	for(new ac_i = 12; ac_i != -1; --ac_i)
	{
		AntiCheatInfo[playerid][acWeapon][ac_i] =
		AntiCheatInfo[playerid][acAmmo][ac_i] = 0;
		AntiCheatInfo[playerid][acSetWeapon][ac_i] = -1;
		AntiCheatInfo[playerid][acGiveAmmo][ac_i] = -65535;
	}
	AntiCheatInfo[playerid][acSet][3] = 0;
	AntiCheatInfo[playerid][acGtc][7] = GetTickCount();
	return 1;
}

ac_fpublic: ac_GivePlayerMoney(playerid, money)
{
	AntiCheatInfo[playerid][acMoney] += money;
	return 1;
}

ac_fpublic: ac_ResetPlayerMoney(playerid)
{
	AntiCheatInfo[playerid][acMoney] = 0;
	return 1;
}

ac_fpublic: ac_GetPlayerMoney(playerid) return AntiCheatInfo[playerid][acMoney];

ac_fpublic: ac_SetPlayerSpecialAction(playerid, actionid)
{
	if(actionid == 2 || actionid == 68 || 4 < actionid < 9
	|| 9 < actionid < 12 || 19 < actionid < 26 || !actionid
	&& AntiCheatInfo[playerid][acSpecAct] != 10 || actionid == 13
	&& AntiCheatInfo[playerid][acSpecAct] == 11)
	{
		AntiCheatInfo[playerid][acNOPCount][6] = 0;
		if((actionid == 68 || 9 < actionid < 12 || 19 < actionid < 26)
		&& 4 < AntiCheatInfo[playerid][acSpecAct] < 9) AntiCheatInfo[playerid][acNextSpecAct] = actionid;
		else
		{
			if(actionid == 13) actionid = 0;
			else if(actionid == 2) AntiCheatInfo[playerid][acNextSpecAct] = AntiCheatInfo[playerid][acSpecAct];
			else AntiCheatInfo[playerid][acNextSpecAct] = -1;
			AntiCheatInfo[playerid][acSet][4] = actionid;
			AntiCheatInfo[playerid][acGtc][6] = GetTickCount();
			if(AntiCheatInfo[playerid][acSpecAct] == 11) AntiCheatInfo[playerid][acGtc][6] += 2500;
		}
	}
	return 1;
}

ac_fpublic: ac_SetPlayerInterior(playerid, interiorid)
{
	while(interiorid < 0) interiorid += 256;
	if(interiorid != GetPlayerInterior(playerid))
	{
		AntiCheatInfo[playerid][acNOPCount][2] = 0;
		if(AntiCheatInfo[playerid][acDead]) AntiCheatInfo[playerid][acSet][12] = interiorid;
		else AntiCheatInfo[playerid][acSet][0] = interiorid;
		AntiCheatInfo[playerid][acGtc][0] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	AntiCheatInfo[playerid][acSet][8] = 1;
	AntiCheatInfo[playerid][acNOPCount][10] = 0;
	AntiCheatInfo[playerid][acSetPos][0] = AntiCheatInfo[playerid][acPos][0] = x;
	AntiCheatInfo[playerid][acSetPos][1] = AntiCheatInfo[playerid][acPos][1] = y;
	AntiCheatInfo[playerid][acSetPos][2] = AntiCheatInfo[playerid][acPos][2] = z;
	AntiCheatInfo[playerid][acGtc][11] = GetTickCount();
	return 1;
}

ac_fpublic: ac_SetPlayerPosFindZ(playerid, Float:x, Float:y, Float:z)
{
	AntiCheatInfo[playerid][acSet][8] = 1;
	AntiCheatInfo[playerid][acTpToZ] = true;
	AntiCheatInfo[playerid][acNOPCount][10] = 0;
	AntiCheatInfo[playerid][acSetPos][0] = AntiCheatInfo[playerid][acPos][0] = x;
	AntiCheatInfo[playerid][acSetPos][1] = AntiCheatInfo[playerid][acPos][1] = y;
	AntiCheatInfo[playerid][acGtc][11] = GetTickCount();
	return 1;
}

ac_fpublic: ac_SetPlayerVelocity(playerid, Float:X, Float:Y, Float:Z)
{
	AntiCheatInfo[playerid][acSpeed] = ac_GetSpeed(X,Y,Z);
	AntiCheatInfo[playerid][acGtc][10] = GetTickCount();
	return 1;
}

ac_fpublic: ac_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
	if(AntiCheatVehInfo[vehicleid][acSpawned])
	{
		new ac_model = GetVehicleModel(vehicleid) - 400;
		AntiCheatInfo[playerid][acNOPCount][7] = 0;
		AntiCheatInfo[playerid][acSet][9] = vehicleid;
		if(seatid > ac_MaxPassengers[ac_model >>> 3] >>> ((ac_model & 7)
		<< 2) & 0xF) AntiCheatInfo[playerid][acSet][5] = -1;
		else AntiCheatInfo[playerid][acSet][5] = seatid;
		AntiCheatInfo[playerid][acGtc][1] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_RemovePlayerFromVehicle(playerid)
{
	AntiCheatInfo[playerid][acSet][11] = 1;
	AntiCheatInfo[playerid][acGtc][8] = GetTickCount();
	return 1;
}

ac_fpublic: ac_SetVehiclePos(vehicleid, Float:x, Float:y, Float:z)
{
	AntiCheatVehInfo[vehicleid][acVel][0] =
	AntiCheatVehInfo[vehicleid][acVel][1] =
	AntiCheatVehInfo[vehicleid][acVel][2] = 0.0;
	if(AntiCheatVehInfo[vehicleid][acDriver] != 65535)
	{
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acSet][8] = 1;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acNOPCount][10] = 0;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acSetPos][0] =
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acPos][0] = x;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acSetPos][1] =
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acPos][1] = y;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acSetPos][2] =
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acPos][2] = z;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acGtc][11] =
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acGtc][9] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_SetVehicleVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	if(AntiCheatVehInfo[vehicleid][acDriver] != 65535)
	{
		AntiCheatVehInfo[vehicleid][acVel][0] = X;
		AntiCheatVehInfo[vehicleid][acVel][1] = Y;
		AntiCheatVehInfo[vehicleid][acVel][2] = Z;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acGtc][9] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_SetVehicleAngularVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	if(AntiCheatVehInfo[vehicleid][acDriver] != 65535)
	{
		AntiCheatVehInfo[vehicleid][acVel][0] = X;
		AntiCheatVehInfo[vehicleid][acVel][1] = Y;
		AntiCheatVehInfo[vehicleid][acVel][2] = Z;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acGtc][9] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_ChangeVehiclePaintjob(vehicleid, paintjobid)
{
	AntiCheatVehInfo[vehicleid][acPaintJob] = paintjobid;
	return 1;
}

ac_fpublic: ac_SetVehicleHealth(vehicleid, Float:health)
{
	if(AntiCheatVehInfo[vehicleid][acDriver] != 65535)
	{
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acNOPCount][4] = 0;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acSetVehHealth] = health;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acGtc][4] = GetTickCount();
	}
	return 1;
}

ac_fpublic: ac_RepairVehicle(vehicleid)
{
	if(AntiCheatVehInfo[vehicleid][acDriver] != 65535)
	{
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acNOPCount][4] = 0;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acSetVehHealth] = 1000.0;
		AntiCheatInfo[AntiCheatVehInfo[vehicleid][acDriver]][acGtc][4] = GetTickCount();
	}
	return 1;
}

#endif

stock acc_AddStaticVehicle(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2)
{
	new ac_vehicleid = AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2);
	if(ac_vehicleid != 65535) CallRemoteFunction("ac_AddStaticVehicle", "i", ac_vehicleid);
	return ac_vehicleid;
}

#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle acc_AddStaticVehicle

stock acc_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay, addsiren = 0)
{
	new ac_vehicleid = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay, addsiren);
	if(ac_vehicleid != 65535) CallRemoteFunction("ac_AddStaticVehicle", "i", ac_vehicleid);
	return ac_vehicleid;
}

#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx acc_AddStaticVehicleEx

stock acc_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren = 0)
{
	new ac_vehicleid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
	if(ac_vehicleid != 65535) CallRemoteFunction("ac_CreateVehicle", "ii", ac_vehicleid, vehicletype);
	return ac_vehicleid;
}

#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define CreateVehicle acc_CreateVehicle

stock acc_AddPlayerClass(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	new ac_classid = AddPlayerClass(modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	if(ac_classid < AC_MAX_CLASSES) CallRemoteFunction("ac_AddPlayerClass", "iiiiiii", ac_classid, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	return ac_classid;
}

#if defined _ALS_AddPlayerClass
	#undef AddPlayerClass
#else
	#define _ALS_AddPlayerClass
#endif
#define AddPlayerClass acc_AddPlayerClass

stock acc_AddPlayerClassEx(teamid, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	new ac_classid = AddPlayerClassEx(teamid, modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	if(ac_classid < AC_MAX_CLASSES) CallRemoteFunction("ac_AddPlayerClass", "iiiiiii", ac_classid, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#if defined AC_MAX_CLASSES
		#undef AC_MAX_CLASSES
	#endif
	return ac_classid;
}

#if defined _ALS_AddPlayerClassEx
	#undef AddPlayerClassEx
#else
	#define _ALS_AddPlayerClassEx
#endif
#define AddPlayerClassEx acc_AddPlayerClassEx

stock acc_SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	if(!SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)) return 0;
	return CallRemoteFunction("ac_SetSpawnInfo", "iiiiiii", playerid, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
}

#if defined _ALS_SetSpawnInfo
	#undef SetSpawnInfo
#else
	#define _ALS_SetSpawnInfo
#endif
#define SetSpawnInfo acc_SetSpawnInfo

stock acc_AddStaticPickup(model, type, Float:X, Float:Y, Float:Z, virtualworld = 0)
{
	new ac_pickupid = CreatePickup(model, type, X, Y, Z, virtualworld);
	if(ac_pickupid != -1) return CallRemoteFunction("ac_AddStaticPickup", "iiifff", ac_pickupid, model, type, X, Y, Z);
	return 0;
}

#if defined _ALS_AddStaticPickup
	#undef AddStaticPickup
#else
	#define _ALS_AddStaticPickup
#endif
#define AddStaticPickup acc_AddStaticPickup

stock acc_CreatePickup(model, type, Float:X, Float:Y, Float:Z, virtualworld = 0)
{
	new ac_pickupid = CreatePickup(model, type, X, Y, Z, virtualworld);
	if(ac_pickupid != -1) CallRemoteFunction("ac_CreatePickup", "iiifff", ac_pickupid, model, type, X, Y, Z);
	return ac_pickupid;
}

#if defined _ALS_CreatePickup
	#undef CreatePickup
#else
	#define _ALS_CreatePickup
#endif
#define CreatePickup acc_CreatePickup

#if defined CreateDynamicPickup
	#if defined STREAMER_ENABLE_TAGS
		stock STREAMER_TAG_PICKUP acc_CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 100.0)
		{
			new STREAMER_TAG_PICKUP ac_pickupid = CreateDynamicPickup(modelid, type, x, y, z, worldid, interiorid, playerid, streamdistance);
	#else
		stock acc_CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 100.0)
		{
			new ac_pickupid = CreateDynamicPickup(modelid, type, x, y, z, worldid, interiorid, playerid, streamdistance);
	#endif
		if(ac_pickupid > 0) CallRemoteFunction("ac_CreateDynamicPickup", "iiifff", ac_pickupid, modelid, type, x, y, z);
		return ac_pickupid;
	}

	#if defined _ALS_CreateDynamicPickup
		#undef CreateDynamicPickup
	#else
		#define _ALS_CreateDynamicPickup
	#endif
	#define CreateDynamicPickup acc_CreateDynamicPickup
#endif

#if defined CreateDynamicPickupEx
	#if defined STREAMER_ENABLE_TAGS
		stock STREAMER_TAG_PICKUP acc_CreateDynamicPickupEx(modelid, type, Float:x, Float:y, Float:z, Float:streamdistance = 100.0, worlds[] = { -1 }, interiors[] = { -1 }, players[] = { -1 }, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)
		{
			new STREAMER_TAG_PICKUP ac_pickupid = CreateDynamicPickupEx(modelid, type, x, y, z, streamdistance, worlds, interiors, players, maxworlds, maxinteriors, maxplayers);
	#else
			stock acc_CreateDynamicPickupEx(modelid, type, Float:x, Float:y, Float:z, Float:streamdistance = 100.0, worlds[] = { -1 }, interiors[] = { -1 }, players[] = { -1 }, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)
		{
			new ac_pickupid = CreateDynamicPickupEx(modelid, type, x, y, z, streamdistance, worlds, interiors, players, maxworlds, maxinteriors, maxplayers);
	#endif
		if(ac_pickupid > 0) CallRemoteFunction("ac_CreateDynamicPickup", "iiifff", ac_pickupid, modelid, type, x, y, z);
		return ac_pickupid;
	}

	#if defined _ALS_CreateDynamicPickupEx
		#undef CreateDynamicPickupEx
	#else
		#define _ALS_CreateDynamicPickupEx
	#endif
	#define CreateDynamicPickupEx acc_CreateDynamicPickupEx
#endif

stock acc_DestroyVehicle(vehicleid)
{
	if(DestroyVehicle(vehicleid)) return CallRemoteFunction("ac_DestroyVehicle", "i", vehicleid);
	return 0;
}

#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif
#define DestroyVehicle acc_DestroyVehicle

stock acc_DestroyPickup(pickup)
{
	if(DestroyPickup(pickup)) return CallRemoteFunction("ac_DestroyPickup", "i", pickup);
	return 0;
}

#if defined _ALS_DestroyPickup
	#undef DestroyPickup
#else
	#define _ALS_DestroyPickup
#endif
#define DestroyPickup acc_DestroyPickup

#if defined DestroyDynamicPickup
	#if defined STREAMER_ENABLE_TAGS
		stock acc_DestroyDynamicPickup(STREAMER_TAG_PICKUP pickupid)
	#else
		stock acc_DestroyDynamicPickup(pickupid)
	#endif
	{
		if(DestroyDynamicPickup(pickupid)) return CallRemoteFunction("ac_DestroyDynamicPickup", "i", pickupid);
		return 0;
	}

	#if defined _ALS_DestroyDynamicPickup
		#undef DestroyDynamicPickup
	#else
		#define _ALS_DestroyDynamicPickup
	#endif
	#define DestroyDynamicPickup acc_DestroyDynamicPickup
#endif

#if defined DestroyAllDynamicPickups
	stock acc_DestroyAllDynamicPickups()
	{
		if(DestroyAllDynamicPickups()) return CallRemoteFunction("ac_DestroyAllDynamicPickups", "");
		return 0;
	}

	#if defined _ALS_DestroyAllDynamicPickups
		#undef DestroyAllDynamicPickups
	#else
		#define _ALS_DestroyAllDynamicPickups
	#endif
	#define DestroyAllDynamicPickups acc_DestroyAllDynamicPickups
#endif

stock acc_DisableInteriorEnterExits() return CallRemoteFunction("ac_DisableInteriorEnterExits", ""), DisableInteriorEnterExits();

#if defined _ALS_DisableInteriorEnterExits
	#undef DisableInteriorEnterExits
#else
	#define _ALS_DisableInteriorEnterExits
#endif
#define DisableInteriorEnterExits acc_DisableInteriorEnterExits

stock acc_UsePlayerPedAnims() return CallRemoteFunction("ac_UsePlayerPedAnims", ""), UsePlayerPedAnims();

#if defined _ALS_UsePlayerPedAnims
	#undef UsePlayerPedAnims
#else
	#define _ALS_UsePlayerPedAnims
#endif
#define UsePlayerPedAnims acc_UsePlayerPedAnims

stock acc_EnableVehicleFriendlyFire() return CallRemoteFunction("ac_EnableVehicleFriendlyFire", ""), EnableVehicleFriendlyFire();

#if defined _ALS_EnableVehicleFriendlyFire
	#undef EnableVehicleFriendlyFire
#else
	#define _ALS_EnableVehicleFriendlyFire
#endif
#define EnableVehicleFriendlyFire acc_EnableVehicleFriendlyFire

stock acc_EnableStuntBonusForAll(enable) return CallRemoteFunction("ac_EnableStuntBonusForAll", "i", enable), EnableStuntBonusForAll(enable);

#if defined _ALS_EnableStuntBonusForAll
	#undef EnableStuntBonusForAll
#else
	#define _ALS_EnableStuntBonusForAll
#endif
#define EnableStuntBonusForAll acc_EnableStuntBonusForAll

stock acc_EnableStuntBonusForPlayer(playerid, enable)
{
	if(EnableStuntBonusForPlayer(playerid, enable)) return CallRemoteFunction("ac_EnableStuntBonusForPlayer", "ii", playerid, enable);
	return 0;
}

#if defined _ALS_EnableStuntBonusForPlayer
	#undef EnableStuntBonusForPlayer
#else
	#define _ALS_EnableStuntBonusForPlayer
#endif
#define EnableStuntBonusForPlayer acc_EnableStuntBonusForPlayer

#if defined Dialog_Show
	stock ac_Dialog_Show(playerid, style, string:title[], string:caption[], string:button1[], string:button2[] = "", dialog = -1)
	{
		if(IsPlayerConnected(playerid)) CallRemoteFunction("ac_ShowPlayerDialog", "id", playerid, dialog);
		return Dialog_Show(playerid, style, title, caption, button1, button2, dialog);
	}

	#if defined _ALS_Dialog_Show
		#undef Dialog_Show
	#else
		#define _ALS_Dialog_Show
	#endif
	#define Dialog_Show ac_Dialog_Show
#endif

stock acc_ShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	if(ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2)) return CallRemoteFunction("ac_ShowPlayerDialog", "id", playerid, dialogid);
	return 0;
}

#if defined _ALS_ShowPlayerDialog
	#undef ShowPlayerDialog
#else
	#define _ALS_ShowPlayerDialog
#endif
#define ShowPlayerDialog acc_ShowPlayerDialog

stock acc_TogglePlayerControllable(playerid, toggle)
{
	if(TogglePlayerControllable(playerid, toggle)) return CallRemoteFunction("ac_TogglePlayerControllable", "ii", playerid, toggle);
	return 0;
}

#if defined _ALS_TogglePlayerControllable
	#undef TogglePlayerControllable
#else
	#define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable acc_TogglePlayerControllable

stock acc_TogglePlayerSpectating(playerid, toggle)
{
	if(TogglePlayerSpectating(playerid, toggle)) return CallRemoteFunction("ac_TogglePlayerSpectating", "ii", playerid, toggle);
	return 0;
}

#if defined _ALS_TogglePlayerSpectating
	#undef TogglePlayerSpectating
#else
	#define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating acc_TogglePlayerSpectating

stock acc_SpawnPlayer(playerid)
{
	if(SpawnPlayer(playerid)) return CallRemoteFunction("ac_SpawnPlayer", "i", playerid);
	return 0;
}

#if defined _ALS_SpawnPlayer
	#undef SpawnPlayer
#else
	#define _ALS_SpawnPlayer
#endif
#define SpawnPlayer acc_SpawnPlayer

stock acc_SetPlayerHealth(playerid, Float:health)
{
	if(health > 16777250.0) health = 16777250.0;
	if(SetPlayerHealth(playerid, health)) return CallRemoteFunction("ac_SetPlayerHealth", "if", playerid, health);
	return 0;
}

#if defined _ALS_SetPlayerHealth
	#undef SetPlayerHealth
#else
	#define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth acc_SetPlayerHealth

stock acc_SetPlayerArmour(playerid, Float:armour)
{
	if(armour > 16777250.0) armour = 16777250.0;
	if(SetPlayerArmour(playerid, armour)) return CallRemoteFunction("ac_SetPlayerArmour", "if", playerid, armour);
	return 0;
}

#if defined _ALS_SetPlayerArmour
	#undef SetPlayerArmour
#else
	#define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour acc_SetPlayerArmour

stock acc_GivePlayerWeapon(playerid, weaponid, ammo)
{
	if(IsPlayerConnected(playerid)) return CallRemoteFunction("ac_GivePlayerWeapon", "iid", playerid, weaponid, ammo);
	return 0;
}

#if defined _ALS_GivePlayerWeapon
	#undef GivePlayerWeapon
#else
	#define _ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon acc_GivePlayerWeapon

stock acc_SetPlayerAmmo(playerid, weaponslot, ammo)
{
	if(IsPlayerConnected(playerid)) return CallRemoteFunction("ac_SetPlayerAmmo", "iid", playerid, weaponslot, ammo);
	return 0;
}

#if defined _ALS_SetPlayerAmmo
	#undef SetPlayerAmmo
#else
	#define _ALS_SetPlayerAmmo
#endif
#define SetPlayerAmmo acc_SetPlayerAmmo

stock acc_SetPlayerArmedWeapon(playerid, weaponid)
{
	if(SetPlayerArmedWeapon(playerid, weaponid)) return CallRemoteFunction("ac_SetPlayerArmedWeapon", "ii", playerid, weaponid);
	return 0;
}

#if defined _ALS_SetPlayerArmedWeapon
	#undef SetPlayerArmedWeapon
#else
	#define _ALS_SetPlayerArmedWeapon
#endif
#define SetPlayerArmedWeapon acc_SetPlayerArmedWeapon

stock acc_ResetPlayerWeapons(playerid)
{
	if(ResetPlayerWeapons(playerid)) return CallRemoteFunction("ac_ResetPlayerWeapons", "i", playerid);
	return 0;
}

#if defined _ALS_ResetPlayerWeapons
	#undef ResetPlayerWeapons
#else
	#define _ALS_ResetPlayerWeapons
#endif
#define ResetPlayerWeapons acc_ResetPlayerWeapons

stock acc_GivePlayerMoney(playerid, money)
{
	if(GivePlayerMoney(playerid, money)) return CallRemoteFunction("ac_GivePlayerMoney", "id", playerid, money);
	return 0;
}

#if defined _ALS_GivePlayerMoney
	#undef GivePlayerMoney
#else
	#define _ALS_GivePlayerMoney
#endif
#define GivePlayerMoney acc_GivePlayerMoney

stock acc_ResetPlayerMoney(playerid)
{
	if(ResetPlayerMoney(playerid)) return CallRemoteFunction("ac_ResetPlayerMoney", "i", playerid);
	return 0;
}

#if defined _ALS_ResetPlayerMoney
	#undef ResetPlayerMoney
#else
	#define _ALS_ResetPlayerMoney
#endif
#define ResetPlayerMoney acc_ResetPlayerMoney

static stock bad_GetPlayerMoney(playerid) return GetPlayerMoney(playerid);

stock acc_GetPlayerMoney(playerid)
{
	if(IsPlayerConnected(playerid)) return CallRemoteFunction("ac_GetPlayerMoney", "i", playerid);
	return 0;
}

#if defined _ALS_GetPlayerMoney
	#undef GetPlayerMoney
#else
	#define _ALS_GetPlayerMoney
#endif
#define GetPlayerMoney acc_GetPlayerMoney

stock acc_SetPlayerSpecialAction(playerid, actionid)
{
	if(SetPlayerSpecialAction(playerid, actionid)) return CallRemoteFunction("ac_SetPlayerSpecialAction", "ii", playerid, actionid);
	return 0;
}

#if defined _ALS_SetPlayerSpecialAction
	#undef SetPlayerSpecialAction
#else
	#define _ALS_SetPlayerSpecialAction
#endif
#define SetPlayerSpecialAction acc_SetPlayerSpecialAction

stock acc_SetPlayerInterior(playerid, interiorid)
{
	if(SetPlayerInterior(playerid, interiorid)) return CallRemoteFunction("ac_SetPlayerInterior", "ii", playerid, interiorid);
	return 0;
}

#if defined _ALS_SetPlayerInterior
	#undef SetPlayerInterior
#else
	#define _ALS_SetPlayerInterior
#endif
#define SetPlayerInterior acc_SetPlayerInterior

stock acc_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	if(SetPlayerPos(playerid, x, y, z)) return CallRemoteFunction("ac_SetPlayerPos", "ifff", playerid, x, y, z);
	return 0;
}

#if defined _ALS_SetPlayerPos
	#undef SetPlayerPos
#else
	#define _ALS_SetPlayerPos
#endif
#define SetPlayerPos acc_SetPlayerPos

stock acc_SetPlayerPosFindZ(playerid, Float:x, Float:y, Float:z)
{
	if(SetPlayerPosFindZ(playerid, x, y, z)) return CallRemoteFunction("ac_SetPlayerPosFindZ", "ifff", playerid, x, y, z);
	return 0;
}

#if defined _ALS_SetPlayerPosFindZ
	#undef SetPlayerPosFindZ
#else
	#define _ALS_SetPlayerPosFindZ
#endif
#define SetPlayerPosFindZ acc_SetPlayerPosFindZ

stock acc_SetPlayerVelocity(playerid, Float:X, Float:Y, Float:Z)
{
	if(SetPlayerVelocity(playerid, X, Y, Z)) return CallRemoteFunction("ac_SetPlayerVelocity", "ifff", playerid, X, Y, Z);
	return 0;
}

#if defined _ALS_SetPlayerVelocity
	#undef SetPlayerVelocity
#else
	#define _ALS_SetPlayerVelocity
#endif
#define SetPlayerVelocity acc_SetPlayerVelocity

stock acc_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
	if(PutPlayerInVehicle(playerid, vehicleid, seatid)) return CallRemoteFunction("ac_PutPlayerInVehicle", "iii", playerid, vehicleid, seatid);
	return 0;
}

#if defined _ALS_PutPlayerInVehicle
	#undef PutPlayerInVehicle
#else
	#define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle acc_PutPlayerInVehicle

stock acc_RemovePlayerFromVehicle(playerid)
{
	if(RemovePlayerFromVehicle(playerid)) return CallRemoteFunction("ac_RemovePlayerFromVehicle", "i", playerid);
	return 0;
}

#if defined _ALS_RemovePlayerFromVehicle
	#undef RemovePlayerFromVehicle
#else
	#define _ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle acc_RemovePlayerFromVehicle

stock acc_SetVehiclePos(vehicleid, Float:x, Float:y, Float:z)
{
	if(SetVehiclePos(vehicleid, x, y, z)) return CallRemoteFunction("ac_SetVehiclePos", "ifff", vehicleid, x, y, z);
	return 0;
}

#if defined _ALS_SetVehiclePos
	#undef SetVehiclePos
#else
	#define _ALS_SetVehiclePos
#endif
#define SetVehiclePos acc_SetVehiclePos

stock acc_SetVehicleVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	if(SetVehicleVelocity(vehicleid, X, Y, Z)) return CallRemoteFunction("ac_SetVehicleVelocity", "ifff", vehicleid, X, Y, Z);
	return 0;
}

#if defined _ALS_SetVehicleVelocity
	#undef SetVehicleVelocity
#else
	#define _ALS_SetVehicleVelocity
#endif
#define SetVehicleVelocity acc_SetVehicleVelocity

stock acc_SetVehicleAngularVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	if(SetVehicleAngularVelocity(vehicleid, X, Y, Z)) return CallRemoteFunction("ac_SetVehicleAngularVelocity", "ifff", vehicleid, X, Y, Z);
	return 0;
}

#if defined _ALS_SetVehicleAngularVelocity
	#undef SetVehicleAngularVelocity
#else
	#define _ALS_SetVehicleAngularVelocity
#endif
#define SetVehicleAngularVelocity acc_SetVehicleAngularVelocity

stock acc_ChangeVehiclePaintjob(vehicleid, paintjobid)
{
	if(ChangeVehiclePaintjob(vehicleid, paintjobid)) return CallRemoteFunction("ac_ChangeVehiclePaintjob", "ii", vehicleid, paintjobid);
	return 0;
}

#if defined _ALS_ChangeVehiclePaintjob
	#undef ChangeVehiclePaintjob
#else
	#define _ALS_ChangeVehiclePaintjob
#endif
#define ChangeVehiclePaintjob acc_ChangeVehiclePaintjob

stock acc_SetVehicleHealth(vehicleid, Float:health)
{
	if(health < 0.0) health = 0.0;
	if(SetVehicleHealth(vehicleid, health)) return CallRemoteFunction("ac_SetVehicleHealth", "if", vehicleid, health);
	return 0;
}

#if defined _ALS_SetVehicleHealth
	#undef SetVehicleHealth
#else
	#define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth acc_SetVehicleHealth

stock acc_RepairVehicle(vehicleid)
{
	if(RepairVehicle(vehicleid)) return CallRemoteFunction("ac_RepairVehicle", "i", vehicleid);
	return 0;
}

#if defined _ALS_RepairVehicle
	#undef RepairVehicle
#else
	#define _ALS_RepairVehicle
#endif
#define RepairVehicle acc_RepairVehicle

#if !defined FILTERSCRIPT

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnGameModeInit()
#else
	public OnGameModeInit()
#endif
{
	if(!ac_LoadCfg()) printf(CFG_OPENING_ERROR, AC_CONFIG_FILE);
	if(ac_ACAllow[42])
	{
		#if !AC_USE_QUERY
			ac_QueryEnable = !!GetConsoleVarAsBool("query");
			SendRconCommand("query 0");
		#endif
		ac_RconEnable = !!GetConsoleVarAsBool("rcon");
		SendRconCommand("rcon 0");
	}
	ac_LagCompMode = !!GetConsoleVarAsInt("lagcompmode");
	print(" ");
	print("--------------------------------------");
	print(LOADED_MSG_1);
	printf(LOADED_MSG_2, NEX_AC_VERSION);
	#undef NEX_AC_VERSION
	print(LOADED_MSG_3);
	print("--------------------------------------\n");
	new ac_a = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnGameModeInit
		ac_a = ac_OnGameModeInit();
	#endif
	new ac_strtmp[10];
	GetConsoleVarAsString("version", ac_strtmp, sizeof ac_strtmp);
	if(strcmp(ac_strtmp, AC_SERVER_VERSION)) print(VERSION_WARNING);
	#undef AC_SERVER_VERSION
	return ac_a;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnGameModeInit
		#undef OnGameModeInit
	#else
		#define _ALS_OnGameModeInit
	#endif
	#define OnGameModeInit ac_OnGameModeInit
	#if defined ac_OnGameModeInit
		forward ac_OnGameModeInit();
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnGameModeExit()
#else
	public OnGameModeExit()
#endif
{
	new ac_a = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnGameModeExit
		ac_a = ac_OnGameModeExit();
	#endif
	print(" ");
	print("--------------------------------------");
	print(STATS_STRING_1);
	print(STATS_STRING_2);
	printf(STATS_STRING_3, ac_StatsInfo[0]);
	printf(STATS_STRING_4, ac_StatsInfo[1]);
	printf(STATS_STRING_5, ac_StatsInfo[2]);
	printf(STATS_STRING_6, ac_StatsInfo[3]);
	printf(STATS_STRING_7, ac_StatsInfo[4]);
	printf(STATS_STRING_8, ac_StatsInfo[5]);
	print("--------------------------------------\n");
	return ac_a;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnGameModeExit
		#undef OnGameModeExit
	#else
		#define _ALS_OnGameModeExit
	#endif
	#define OnGameModeExit ac_OnGameModeExit
	#if defined ac_OnGameModeExit
		forward ac_OnGameModeExit();
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerConnect(playerid)
#else
	public OnPlayerConnect(playerid)
#endif
{
	GetPlayerIp(playerid, AntiCheatInfo[playerid][acIp], 16);
	if(IsPlayerNPC(playerid))
	{
		if(ac_ACAllow[36] && strcmp(AntiCheatInfo[playerid][acIp],
		"127.0.0.1")) ac_KickWithCode(playerid, "", 0, 36);
		AntiCheatInfo[playerid][acTimerID] = -1;
	}
	else
	{
		if(ac_ACAllow[48] && AntiCheatInfo[playerid][acOnline]) ac_KickWithCode(playerid, "", 0, 48);
		if(ac_ACAllow[41])
		{
			new ac_version[8];
			GetPlayerVersion(playerid, ac_version, sizeof ac_version);
			if(!strcmp(ac_version, "unknown", true))
			{
				#if defined DEBUG
					printf(DEBUG_CODE_2, playerid, ac_version);
				#endif
				ac_KickWithCode(playerid, "", 0, 41);
			}
		}
		new ac_i = AC_MAX_CONNECTS_FROM_IP;
		if(ac_ACAllow[40])
		{
			#if defined foreach
				foreach(new ac_f : Player)
				{
					if(!IsPlayerNPC(ac_f) && ac_f != playerid
					&& !strcmp(AntiCheatInfo[playerid][acIp], AntiCheatInfo[ac_f][acIp], false))
			#else
				for(new ac_f = GetPlayerPoolSize(); ac_f != -1; --ac_f)
				{
					if(IsPlayerConnected(ac_f) && !IsPlayerNPC(ac_f) && ac_f != playerid
					&& !strcmp(AntiCheatInfo[playerid][acIp], AntiCheatInfo[ac_f][acIp], false))
			#endif
				{
					ac_i--;
					if(!ac_i)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_3, playerid, AC_MAX_CONNECTS_FROM_IP);
						#endif
						#undef AC_MAX_CONNECTS_FROM_IP
						ac_KickWithCode(playerid, "", 0, 40);
						break;
					}
				}
			}
		}
		AntiCheatInfo[playerid][acDead] = true;
		AntiCheatInfo[playerid][acDeathRes] = false;
		AntiCheatInfo[playerid][acIntEnterExits] = ac_IntEnterExits;
		AntiCheatInfo[playerid][acStuntBonus] = ac_StuntBonus;
		AntiCheatInfo[playerid][acCheatCount][0] =
		AntiCheatInfo[playerid][acLastWeapon] =
		AntiCheatInfo[playerid][acSpawnRes] =
		AntiCheatInfo[playerid][acKicked] =
		AntiCheatInfo[playerid][acMoney] = 0;
		AntiCheatInfo[playerid][acSet][13] =
		AntiCheatInfo[playerid][acSet][12] =
		AntiCheatInfo[playerid][acSet][0] =
		AntiCheatInfo[playerid][acDialog] = -1;
		AntiCheatInfo[playerid][acAnim] = -2;
		for(ac_i = 12; ac_i != -1; --ac_i)
		{
			AntiCheatInfo[playerid][acSetWeapon][ac_i] = -1;
			AntiCheatInfo[playerid][acGiveAmmo][ac_i] = -65535;
		}
		for(ac_i = 27; ac_i != -1; --ac_i) AntiCheatInfo[playerid][acFloodCount][ac_i] = 0;
		AntiCheatInfo[playerid][acDropJP][0] = AntiCheatInfo[playerid][acDropJP][1] =
		AntiCheatInfo[playerid][acDropJP][2] = 20001.0;
		memcpy(AntiCheatInfo[playerid][acACAllow], ac_ACAllow, 0, sizeof(ac_ACAllow) * 4, sizeof ac_ACAllow);
		AntiCheatInfo[playerid][acTimerID] = SetTimerEx("ac_Timer", 1000, false, "i", playerid);
	}
	AntiCheatInfo[playerid][acOnline] = true;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerConnect
		return ac_OnPlayerConnect(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerConnect
		#undef OnPlayerConnect
	#else
		#define _ALS_OnPlayerConnect
	#endif
	#define OnPlayerConnect ac_OnPlayerConnect
	#if defined ac_OnPlayerConnect
		forward ac_OnPlayerConnect(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerDisconnect(playerid, reason)
#else
	public OnPlayerDisconnect(playerid, reason)
#endif
{
	if(AntiCheatInfo[playerid][acOnline])
	{
		AntiCheatInfo[playerid][acOnline] = false;
		if(!IsPlayerNPC(playerid))
		{
			KillTimer(AntiCheatInfo[playerid][acTimerID]);
			if(!reason) Kick(playerid);
			if(AntiCheatInfo[playerid][acACAllow][37]) BlockIpAddress(AntiCheatInfo[playerid][acIp],
			(AC_MIN_TIME_RECONNECT * 1000) - (reason ? 0 : GetConsoleVarAsInt("playertimeout")));
			#undef AC_MIN_TIME_RECONNECT
		}
		if(AntiCheatInfo[playerid][acVeh]
		&& AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver] == playerid)
		{
			AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver] = 65535;
			if(AntiCheatInfo[playerid][acKicked] == 2)
			{
				LinkVehicleToInterior(AntiCheatInfo[playerid][acVeh],
				AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acInt]);
				SetVehicleZAngle(AntiCheatInfo[playerid][acVeh],
				AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acZAngle]);
				SetVehiclePos(AntiCheatInfo[playerid][acVeh], AntiCheatInfo[playerid][acPos][0],
				AntiCheatInfo[playerid][acPos][1], AntiCheatInfo[playerid][acPos][2]);
				SetVehicleHealth(AntiCheatInfo[playerid][acVeh],
				AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acHealth]);
				ChangeVehiclePaintjob(AntiCheatInfo[playerid][acVeh],
				AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acPaintJob]);
			}
		}
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerDisconnect
			return ac_OnPlayerDisconnect(playerid, reason);
		#endif
	}
	return 1;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerDisconnect
		#undef OnPlayerDisconnect
	#else
		#define _ALS_OnPlayerDisconnect
	#endif
	#define OnPlayerDisconnect ac_OnPlayerDisconnect
	#if defined ac_OnPlayerDisconnect
		forward ac_OnPlayerDisconnect(playerid, reason);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerSpawn(playerid)
#else
	public OnPlayerSpawn(playerid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	if(!IsPlayerNPC(playerid))
	{
		if(AntiCheatInfo[playerid][acACAllow][27]
		&& (AntiCheatInfo[playerid][acSpawnRes] < 1
		|| GetTickCount() < AntiCheatInfo[playerid][acSpawnTime] + 1000))
		{
			ac_KickWithCode(playerid, "", 0, 27);
			#if defined OnCheatDetected
				AntiCheatInfo[playerid][acSpawnRes] = 1;
			#endif
		}
		new ac_i;
		for(ac_i = 10; ac_i != 0; --ac_i) AntiCheatInfo[playerid][acSet][ac_i] = -1;
		for(ac_i = 12; ac_i != -1; --ac_i)
		{
			AntiCheatInfo[playerid][acWeapon][ac_i] =
			AntiCheatInfo[playerid][acAmmo][ac_i] = 0;
			AntiCheatInfo[playerid][acSetWeapon][ac_i] = -1;
			AntiCheatInfo[playerid][acGiveAmmo][ac_i] = -65535;
		}
		AntiCheatInfo[playerid][acParachute] =
		AntiCheatInfo[playerid][acModShop] =
		AntiCheatInfo[playerid][acPicked] =
		AntiCheatInfo[playerid][acTpToZ] =
		AntiCheatInfo[playerid][acDead] = false;
		AntiCheatInfo[playerid][acFreeze] = true;
		AntiCheatInfo[playerid][acNextSpecAct] =
		AntiCheatInfo[playerid][acLastPickup] =
		AntiCheatInfo[playerid][acSeat] = -1;
		AntiCheatInfo[playerid][acCheatCount][14] =
		AntiCheatInfo[playerid][acCheatCount][9] =
		AntiCheatInfo[playerid][acLastSpecAct] =
		AntiCheatInfo[playerid][acLastShot] =
		AntiCheatInfo[playerid][acSpecAct] =
		AntiCheatInfo[playerid][acDmgRes] =
		AntiCheatInfo[playerid][acVeh] = 0;
		AntiCheatInfo[playerid][acSpawnRes]--;
		AntiCheatInfo[playerid][acSpeed] = 0.0;
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 0.0);
		for(ac_i = 2; ac_i != -1; --ac_i)
		{
			if(AntiCheatInfo[playerid][acSpawnWeapon][ac_i] != -1)
			{
				AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[AntiCheatInfo[playerid]
				[acSpawnWeapon][ac_i]]] = AntiCheatInfo[playerid][acSpawnWeapon][ac_i];
				AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[AntiCheatInfo[playerid]
				[acSpawnWeapon][ac_i]]] = AntiCheatInfo[playerid][acSpawnAmmo][ac_i];
			}
		}
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerSpawn
		return ac_OnPlayerSpawn(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerSpawn
		#undef OnPlayerSpawn
	#else
		#define _ALS_OnPlayerSpawn
	#endif
	#define OnPlayerSpawn ac_OnPlayerSpawn
	#if defined ac_OnPlayerSpawn
		forward ac_OnPlayerSpawn(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerDeath(playerid, killerid, reason)
#else
	public OnPlayerDeath(playerid, killerid, reason)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	if(AntiCheatInfo[playerid][acACAllow][28] && (AntiCheatInfo[playerid][acDead]
	|| !AntiCheatInfo[playerid][acDeathRes] && reason != 255 && (reason != 54
	|| killerid != 65535))) ac_KickWithCode(playerid, "", 0, 28);
	AntiCheatInfo[playerid][acDeathRes] = false;
	AntiCheatInfo[playerid][acSet][0] = -1;
	AntiCheatInfo[playerid][acDead] = true;
	AntiCheatInfo[playerid][acSpawnRes] = 1;
	AntiCheatInfo[playerid][acSpawnTime] = GetTickCount();
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerDeath
		return ac_OnPlayerDeath(playerid, killerid, reason);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerDeath
		#undef OnPlayerDeath
	#else
		#define _ALS_OnPlayerDeath
	#endif
	#define OnPlayerDeath ac_OnPlayerDeath
	#if defined ac_OnPlayerDeath
		forward ac_OnPlayerDeath(playerid, killerid, reason);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
#else
	public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
#endif
{
	AntiCheatInfo[playerid][acDeathRes] = true;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerTakeDamage
		return ac_OnPlayerTakeDamage(playerid, issuerid, amount, weaponid, bodypart);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerTakeDamage
		#undef OnPlayerTakeDamage
	#else
		#define _ALS_OnPlayerTakeDamage
	#endif
	#define OnPlayerTakeDamage ac_OnPlayerTakeDamage
	#if defined ac_OnPlayerTakeDamage
		forward ac_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
#else
	public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][0] + ac_Mtfc[0][0]) ac_FloodDetect(playerid, 0);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][0] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	if(AntiCheatInfo[playerid][acACAllow][39] && dialogid != AntiCheatInfo[playerid][acDialog])
	{
		#if defined OnCheatDetected
			ac_KickWithCode(playerid, "", 0, 39);
		#else
			return ac_KickWithCode(playerid, "", 0, 39);
		#endif
	}
	AntiCheatInfo[playerid][acDialog] = -1;
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][0] = ac_i;
	if(AntiCheatInfo[playerid][acACAllow][45])
	{
		for(ac_i = strlen(inputtext) - 1; ac_i != -1; --ac_i)
		{
			if(inputtext[ac_i] == '%') strdel(inputtext, ac_i, ac_i + 1);
		}
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnDialogResponse
		return ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnDialogResponse
		#undef OnDialogResponse
	#else
		#define _ALS_OnDialogResponse
	#endif
	#define OnDialogResponse ac_OnDialogResponse
	#if defined ac_OnDialogResponse
		forward ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnEnterExitModShop(playerid, enterexit, interiorid)
#else
	public OnEnterExitModShop(playerid, enterexit, interiorid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	#if !AC_USE_TUNING_GARAGES && !defined OnCheatDetected
		return ac_KickWithCode(playerid, "", 0, 23, 1);
	#else
		#if !AC_USE_TUNING_GARAGES
			ac_KickWithCode(playerid, "", 0, 23, 1);
		#endif
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][1] + ac_Mtfc[1][0]) ac_FloodDetect(playerid, 1);
			else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][1] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acSet][0] = interiorid;
		AntiCheatInfo[playerid][acModShop] = !!enterexit;
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][1] = ac_i;
		AntiCheatInfo[playerid][acGtc][11] = ac_i + 1500;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnEnterExitModShop
			return ac_OnEnterExitModShop(playerid, enterexit, interiorid);
		#else
			return 1;
		#endif
	#endif
	#undef AC_USE_TUNING_GARAGES
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnEnterExitModShop
		#undef OnEnterExitModShop
	#else
		#define _ALS_OnEnterExitModShop
	#endif
	#define OnEnterExitModShop ac_OnEnterExitModShop
	#if defined ac_OnEnterExitModShop
		forward ac_OnEnterExitModShop(playerid, enterexit, interiorid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
#else
	public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
#endif
{
	if(!IsPlayerConnected(playerid)
	|| AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetPlayerVehicleID(playerid);
	if(newinteriorid != AntiCheatInfo[playerid][acSet][0])
	{
		if(ac_i)
		{
			if(AntiCheatInfo[playerid][acACAllow][3]) ac_KickWithCode(playerid, "", 0, 3, 1);
		}
		else if(AntiCheatInfo[playerid][acACAllow][2] && !AntiCheatInfo[playerid][acIntEnterExits]
		&& newinteriorid != AntiCheatInfo[playerid][acSet][12]) ac_KickWithCode(playerid, "", 0, 2, 1);
		GetPlayerPos(playerid, AntiCheatInfo[playerid][acPos][0],
		AntiCheatInfo[playerid][acPos][1], AntiCheatInfo[playerid][acPos][2]);
		AntiCheatInfo[playerid][acGtc][11] = GetTickCount() + 1500;
	}
	if(!AntiCheatInfo[playerid][acKicked] && ac_i) AntiCheatVehInfo[ac_i][acInt] = newinteriorid;
	if(AntiCheatInfo[playerid][acSet][12] == -1) AntiCheatInfo[playerid][acSet][0] = -1;
	else AntiCheatInfo[playerid][acSet][12] = -1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerInteriorChange
		return ac_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerInteriorChange
		#undef OnPlayerInteriorChange
	#else
		#define _ALS_OnPlayerInteriorChange
	#endif
	#define OnPlayerInteriorChange ac_OnPlayerInteriorChange
	#if defined ac_OnPlayerInteriorChange
		forward ac_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnRconLoginAttempt(ip[], password[], success)
#else
	public OnRconLoginAttempt(ip[], password[], success)
#endif
{
	if(ac_ACAllow[42])
	{
		static ac_iptables[MAX_PLAYERS][2], ac_ip_index;
		new ac_i, ac_current_ip = ac_IpToInt(ip);
		for(; ac_i < ac_ip_index && ac_i < sizeof ac_iptables; ++ac_i)
		{
			if(ac_iptables[ac_i][0] == ac_current_ip)
			{
				if(success) ac_iptables[ac_i][1] = 0;
				else if(++ac_iptables[ac_i][1] > AC_MAX_RCON_LOGIN_ATTEMPT)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_4, ip, password);
					#endif
					ac_iptables[ac_i][1] = 0;
					ac_KickWithCode(65535, ip, 1, 42, 1);
				}
				ac_i = -1;
				break;
			}
		}
		if(ac_i != -1 && !success)
		{
			ac_iptables[ac_ip_index][0] = ac_current_ip;
			if(++ac_iptables[ac_ip_index][1] > AC_MAX_RCON_LOGIN_ATTEMPT)
			{
				#undef AC_MAX_RCON_LOGIN_ATTEMPT
				#if defined DEBUG
					printf(DEBUG_CODE_4, ip, password, ac_iptables[ac_ip_index][1]);
				#endif
				ac_iptables[ac_ip_index][1] = 0;
				ac_KickWithCode(65535, ip, 1, 42, 2);
			}
			if(++ac_ip_index > sizeof(ac_iptables) - 1) ac_ip_index = 0;
			ac_iptables[ac_ip_index][1] = 0;
		}
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnRconLoginAttempt
		return ac_OnRconLoginAttempt(ip, password, success);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnRconLoginAttempt
		#undef OnRconLoginAttempt
	#else
		#define _ALS_OnRconLoginAttempt
	#endif
	#define OnRconLoginAttempt ac_OnRconLoginAttempt
	#if defined ac_OnRconLoginAttempt
		forward ac_OnRconLoginAttempt(ip[], password[], success);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerUpdate(playerid)
#else
	public OnPlayerUpdate(playerid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	static ac_gtc, ac_gpp, bool:ac_ur;
	ac_ur = false;
	ac_gtc = GetTickCount();
	if(!IsPlayerNPC(playerid))
	{
		ac_gpp = GetPlayerPing(playerid);
		if(AntiCheatInfo[playerid][acACAllow][38])
		{
			if(ac_gpp > AC_MAX_PING)
			{
				if(++AntiCheatInfo[playerid][acCheatCount][0] > AC_MAX_PING_WARNINGS)
				{
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 38);
						AntiCheatInfo[playerid][acCheatCount][0] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 38);
					#endif
				}
				#undef AC_MAX_PING_WARNINGS
			}
			else AntiCheatInfo[playerid][acCheatCount][0] = 0;
		}
		static ac_stateanim;
		if((ac_stateanim = GetPlayerState(playerid)) != 9)
		{
			ac_gpp += 150;
			static ac_w, ac_a;
			ac_a = GetPlayerAmmo(playerid);
			ac_w = GetPlayerWeapon(playerid);
			if(AntiCheatInfo[playerid][acSet][3] != -1)
			{
				if(AntiCheatInfo[playerid][acSet][3] == ac_w)
				{
					AntiCheatInfo[playerid][acSet][3] =
					AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[ac_w]] = -1;
					AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[ac_w]] = ac_w;
				}
				else if(AntiCheatInfo[playerid][acACAllow][52] && !(1 < ac_stateanim < 4)
				&& ac_gtc > AntiCheatInfo[playerid][acGtc][2] + ac_gpp
				&& ++AntiCheatInfo[playerid][acNOPCount][0] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "GivePlayerWeapon");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 1);
						AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[ac_w]] =
						AntiCheatInfo[playerid][acSet][3] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 1);
					#endif
				}
			}
			if(AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[ac_w]] != -65535)
			{
				if(AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[ac_w]] == ac_a)
				{
					AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[ac_w]] = -65535;
					AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] = ac_a;
				}
				else if(AntiCheatInfo[playerid][acACAllow][52] && ac_gtc
				> AntiCheatInfo[playerid][acGtcGiveAmmo][ac_WeaponSlots[ac_w]] + ac_gpp
				&& ++AntiCheatInfo[playerid][acNOPCount][1] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "SetPlayerAmmo");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 2);
						AntiCheatInfo[playerid][acGiveAmmo][ac_WeaponSlots[ac_w]] = -65535;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 2);
					#endif
				}
			}
			static ac_i;
			ac_i = GetPlayerInterior(playerid);
			if(AntiCheatInfo[playerid][acLastWeapon] != ac_w)
			{
				if(AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[ac_w]] != ac_w)
				{
					if(ac_w == 40 || ac_w == 46 && AntiCheatInfo[playerid][acVeh]
					&& AntiCheatInfo[playerid][acParachute])
					{
						AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[ac_w]] = ac_w;
						AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] = ac_a;
					}
					#if AC_USE_AMMUNATIONS
					else if(21 < ac_w < 33 && ac_IsPlayerInAmmuNation(playerid, ac_i))
					{
						if(AntiCheatInfo[playerid][acSet][10]
						!= -1) AntiCheatInfo[playerid][acSet][10] += ac_AmmuNationInfo[ac_w - 22][0];
						else AntiCheatInfo[playerid][acSet][10] = ac_AmmuNationInfo[ac_w - 22][0];
						AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] = ac_AmmuNationInfo[ac_w - 22][1];
						AntiCheatInfo[playerid][acCheatCount][10] = 0;
						AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[ac_w]] = ac_w;
						ac_ur = true;
					}
					#endif
					else if(-1 < AntiCheatInfo[playerid][acLastPickup] < MAX_PICKUPS
					&& AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon] == ac_w
					&& ac_a == ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon]]
					&& IsPlayerInRangeOfPoint(playerid, 5.0, AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acPos][0],
					AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acPos][1],
					AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acPos][2]))
					{
						AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[ac_w]] = ac_w;
						if(2 < ac_WeaponSlots[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon]]
						< 6) AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] +=
						ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon]];
						else AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] =
						ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon]];
					}
					else if(AntiCheatInfo[playerid][acLastPickup] > MAX_PICKUPS
					&& AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon] == ac_w
					&& ac_a == ac_PickupAmmo[AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon]]
					&& IsPlayerInRangeOfPoint(playerid, 5.0, AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acPos][0],
					AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acPos][1],
					AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acPos][2]))
					{
						AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[ac_w]] = ac_w;
						if(2 < ac_WeaponSlots[AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon]]
						< 6) AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] +=
						ac_PickupAmmo[AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon]];
						else AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] =
						ac_PickupAmmo[AntiCheatDPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon]];
					}
					else if(AntiCheatInfo[playerid][acACAllow][15]
					&& AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[ac_w]] == -1
					&& ac_gtc > AntiCheatInfo[playerid][acGtc][7] + ac_gpp)
					{
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 15, 1);
							AntiCheatInfo[playerid][acWeapon][ac_WeaponSlots[ac_w]] = ac_w;
						#else
							return ac_KickWithCode(playerid, "", 0, 15, 1);
						#endif
					}
				}
			}
			else if(AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] != ac_a)
			{
				switch(ac_w)
				{
					case 16..18, 35, 36, 39, 43:
					{
						if(ac_stateanim != 2)
						{
							if(AntiCheatInfo[playerid][acACAllow][16]
							&& ac_gtc > AntiCheatInfo[playerid][acGtc][7] + ac_gpp
							&& (!AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]]
							|| AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] - 1 != ac_a))
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 16, 1);
									AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]] = ac_a;
								#else
									return ac_KickWithCode(playerid, "", 0, 16, 1);
								#endif
							}
							AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[ac_w]]--;
						}
					}
				}
			}
			static Float:ac_health;
			GetPlayerHealth(playerid, ac_health);
			if(AntiCheatInfo[playerid][acSet][1] != -1)
			{
				if(AntiCheatInfo[playerid][acSet][1] > 255)
				{
					while(ac_health < AntiCheatInfo[playerid][acSet][1]) ac_health += 256;
				}
				if(AntiCheatInfo[playerid][acSet][1] == ac_health) AntiCheatInfo[playerid][acSet][1] = -1;
				else if(AntiCheatInfo[playerid][acACAllow][52] && ac_gtc > AntiCheatInfo[playerid][acGtc][3]
				+ ac_gpp && ++AntiCheatInfo[playerid][acNOPCount][3] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "SetPlayerHealth");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 3);
						AntiCheatInfo[playerid][acSet][1] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 3);
					#endif
				}
			}
			else if(AntiCheatInfo[playerid][acACAllow][12])
			{
				while(AntiCheatInfo[playerid][acHealth] > ac_health + 255) ac_health += 256;
				if(ac_health > AntiCheatInfo[playerid][acHealth])
				{
					#if AC_USE_RESTAURANTS
						if(!(ac_health <= AntiCheatInfo[playerid][acHealth] + 70.0
						&& ac_IsPlayerInRestaurant(playerid, ac_i)))
						{
					#endif
						#if AC_USE_VENDING_MACHINES
							if(!(ac_health <= AntiCheatInfo[playerid][acHealth] + 35.0
							&& ac_IsPlayerNearVendingMachine(playerid, ac_i)))
							{
						#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 12);
							#else
								return ac_KickWithCode(playerid, "", 0, 12);
							#endif
						#if AC_USE_VENDING_MACHINES
							}
						#endif
					#if AC_USE_RESTAURANTS
						}
					#endif
				}
			}
			static Float:ac_armour;
			GetPlayerArmour(playerid, ac_armour);
			if(AntiCheatInfo[playerid][acSet][2] != -1)
			{
				if(AntiCheatInfo[playerid][acSet][2] > 255)
				{
					while(ac_armour < AntiCheatInfo[playerid][acSet][2]) ac_armour += 256;
				}
				if(AntiCheatInfo[playerid][acSet][2] == ac_armour) AntiCheatInfo[playerid][acSet][2] = -1;
				else if(AntiCheatInfo[playerid][acACAllow][52] && ac_gtc > AntiCheatInfo[playerid][acGtc][5]
				+ ac_gpp && ++AntiCheatInfo[playerid][acNOPCount][5] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "SetPlayerArmour");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 4);
						AntiCheatInfo[playerid][acSet][2] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 4);
					#endif
				}
			}
			else if(AntiCheatInfo[playerid][acACAllow][13])
			{
				while(AntiCheatInfo[playerid][acArmour] > ac_armour + 255) ac_armour += 256;
				if(ac_armour > AntiCheatInfo[playerid][acArmour])
				{
					#if AC_USE_AMMUNATIONS
						if(ac_IsPlayerInAmmuNation(playerid, ac_i))
						{
							if(AntiCheatInfo[playerid][acSet][10]
							!= -1) AntiCheatInfo[playerid][acSet][10] += 200;
							else AntiCheatInfo[playerid][acSet][10] = 200;
							AntiCheatInfo[playerid][acCheatCount][10] = 0;
							ac_ur = true;
						}
						else
						{
					#endif
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 13);
						#else
							return ac_KickWithCode(playerid, "", 0, 13);
						#endif
					#if AC_USE_AMMUNATIONS
						}
					#endif
				}
			}
			if(AntiCheatInfo[playerid][acACAllow][19])
			{
				if(ac_health < AntiCheatInfo[playerid][acHealth]
				|| ac_armour < AntiCheatInfo[playerid][acArmour])
				{
					AntiCheatInfo[playerid][acVehDmgRes] = false;
					AntiCheatInfo[playerid][acCheatCount][9] =
					AntiCheatInfo[playerid][acDmgRes] = 0;
				}
				else if(AntiCheatInfo[playerid][acDmgRes]
				&& ac_gtc > AntiCheatInfo[playerid][acGtc][14] + ac_gpp)
				{
					AntiCheatInfo[playerid][acDmgRes] = 0;
					AntiCheatInfo[playerid][acVehDmgRes] = false;
					if(++AntiCheatInfo[playerid][acCheatCount][9]
					> AC_MAX_GODMODE_WARNINGS)
					{
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 19);
							AntiCheatInfo[playerid][acCheatCount][9] = 0;
						#else
							return ac_KickWithCode(playerid, "", 0, 19);
						#endif
					}
				}
			}
			static ac_vehid;
			ac_a = bad_GetPlayerMoney(playerid);
			ac_vehid = GetPlayerVehicleID(playerid);
			if(AntiCheatInfo[playerid][acACAllow][14]
			&& ac_a > AntiCheatInfo[playerid][acMoney]
			&& !(AntiCheatInfo[playerid][acStuntBonus] && ac_vehid))
			{
				#if AC_USE_CASINOS
					if(!ac_IsPlayerInCasino(playerid, ac_i))
					{
				#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 14);
						AntiCheatInfo[playerid][acMoney] = ac_a;
					#else
						ac_a = AntiCheatInfo[playerid][acMoney];
						ResetPlayerMoney(playerid);
						GivePlayerMoney(playerid, ac_a);
					#endif
				#if AC_USE_CASINOS
					}
				#endif
			}
			if(AntiCheatInfo[playerid][acSet][10] != -1)
			{
				if(ac_a < AntiCheatInfo[playerid][acMoney] && AntiCheatInfo[playerid][acSet][10]
				== (AntiCheatInfo[playerid][acMoney] - ac_a)) AntiCheatInfo[playerid][acSet][10] = -1;
				else if(AntiCheatInfo[playerid][acACAllow][15] && ac_gtc > AntiCheatInfo[playerid][acGtc][15]
				+ 1030 && ++AntiCheatInfo[playerid][acCheatCount][10] > AC_MAX_NOP_WARNINGS)
				{
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 15, 3);
						AntiCheatInfo[playerid][acSet][10] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 15, 3);
					#endif
				}
			}
			if(AntiCheatInfo[playerid][acSet][13] != -1)
			{
				if(ac_a < AntiCheatInfo[playerid][acMoney] && AntiCheatInfo[playerid][acSet][13]
				== (AntiCheatInfo[playerid][acMoney] - ac_a)) AntiCheatInfo[playerid][acSet][13] = -1;
				else if(AntiCheatInfo[playerid][acACAllow][23] && ac_gtc > AntiCheatInfo[playerid][acGtc][17]
				+ 1500 && ++AntiCheatInfo[playerid][acCheatCount][12] > AC_MAX_NOP_WARNINGS)
				{
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 23, 3);
						AntiCheatInfo[playerid][acSet][13] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 23, 3);
					#endif
				}
			}
			if(AntiCheatInfo[playerid][acACAllow][52])
			{
				if(AntiCheatInfo[playerid][acSet][0] != -1 && ac_gtc > AntiCheatInfo[playerid][acGtc][0]
				+ ac_gpp && ++AntiCheatInfo[playerid][acNOPCount][2] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "SetPlayerInterior");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 5);
						AntiCheatInfo[playerid][acSet][0] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 5);
					#endif
				}
				if(AntiCheatInfo[playerid][acSet][6] != -1 && ac_gtc > AntiCheatInfo[playerid][acGtc][12]
				+ ac_gpp && ++AntiCheatInfo[playerid][acNOPCount][8] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "TogglePlayerSpectating");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 6);
						AntiCheatInfo[playerid][acSet][6] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 6);
					#endif
				}
				if(AntiCheatInfo[playerid][acSet][7] != -1 && ac_gtc > AntiCheatInfo[playerid][acGtc][13]
				+ ac_gpp && ++AntiCheatInfo[playerid][acNOPCount][9] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "SpawnPlayer");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 7);
						AntiCheatInfo[playerid][acSet][7] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 7);
					#endif
				}
				if(AntiCheatInfo[playerid][acSet][11] != -1 && ac_vehid
				&& ac_gtc > AntiCheatInfo[playerid][acGtc][8] + ac_gpp + 3000)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "RemovePlayerFromVehicle");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 8);
						AntiCheatInfo[playerid][acSet][11] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 8);
					#endif
				}
			}
			static ac_s, Float:ac_pposX, Float:ac_pposY, Float:ac_pposZ;
			ac_s = GetPlayerVehicleSeat(playerid);
			GetPlayerPos(playerid, ac_pposX, ac_pposY, ac_pposZ);
			if(AntiCheatInfo[playerid][acSet][9] != -1)
			{
				if(AntiCheatInfo[playerid][acSet][9] == ac_vehid
				&& (AntiCheatInfo[playerid][acSet][5] == ac_s
				|| AntiCheatInfo[playerid][acSet][5] == -1))
				{
					if(AntiCheatInfo[playerid][acVeh]
					&& AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver] == playerid)
					{
						if(GetVehicleModel(AntiCheatInfo[playerid][acVeh]) == 457
						&& !AntiCheatInfo[playerid][acWeapon][1]) AntiCheatInfo[playerid][acWeapon][1] = 2;
						AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver] = 65535;
					}
					if(!ac_s)
					{
						AntiCheatVehInfo[ac_vehid][acDriver] = playerid;
						GetVehicleZAngle(ac_vehid, AntiCheatVehInfo[ac_vehid][acZAngle]);
						AntiCheatInfo[playerid][acSetVehHealth] = -1;
					}
					AntiCheatInfo[playerid][acCheatCount][11] = 0;
					AntiCheatInfo[playerid][acVehDmgRes] = false;
					AntiCheatInfo[playerid][acSet][11] =
					AntiCheatInfo[playerid][acSet][9] =
					AntiCheatInfo[playerid][acSet][8] =
					AntiCheatInfo[playerid][acSet][5] = -1;
					AntiCheatInfo[playerid][acSeat] = ac_s;
				}
				else if(AntiCheatInfo[playerid][acACAllow][52] && ac_gtc > AntiCheatInfo[playerid][acGtc][1]
				+ ac_gpp && ++AntiCheatInfo[playerid][acNOPCount][7] > AC_MAX_NOP_WARNINGS)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_5, playerid, "PutPlayerInVehicle");
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 52, 9);
						AntiCheatInfo[playerid][acSet][9] = -1;
					#else
						return ac_KickWithCode(playerid, "", 0, 52, 9);
					#endif
				}
			}
			else
			{
				if(AntiCheatInfo[playerid][acSet][8] != -1)
				{
					if(IsPlayerInRangeOfPoint(playerid, 5.0, AntiCheatInfo[playerid][acSetPos][0],
					AntiCheatInfo[playerid][acSetPos][1], (AntiCheatInfo[playerid][acTpToZ]
					? ac_pposZ : AntiCheatInfo[playerid][acSetPos][2])))
					{
						AntiCheatInfo[playerid][acSet][8] = -1;
						AntiCheatInfo[playerid][acGtc][11] = 0;
						AntiCheatInfo[playerid][acTpToZ] = false;
						AntiCheatInfo[playerid][acPos][0] = ac_pposX;
						AntiCheatInfo[playerid][acPos][1] = ac_pposY;
						AntiCheatInfo[playerid][acPos][2] = ac_pposZ;
					}
					else if(ac_gtc > AntiCheatInfo[playerid][acGtc][11] + ac_gpp)
					{
						AntiCheatInfo[playerid][acTpToZ] = false;
						if(AntiCheatInfo[playerid][acACAllow][52]
						&& ++AntiCheatInfo[playerid][acNOPCount][10] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerPos");
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 52, 10);
								AntiCheatInfo[playerid][acSet][8] = -1;
							#else
								return ac_KickWithCode(playerid, "", 0, 52, 10);
							#endif
						}
					}
				}
				static Float:ac_pvelX, Float:ac_pvelY, Float:ac_pvelZ, Float:ac_vctsize, ac_specact;
				ac_vctsize = GetPlayerDistanceFromPoint(playerid, AntiCheatInfo[playerid][acPos][0],
				AntiCheatInfo[playerid][acPos][1], AntiCheatInfo[playerid][acPos][2]);
				ac_specact = GetPlayerSpecialAction(playerid);
				if(ac_vehid)
				{
					if(!AntiCheatInfo[playerid][acVeh])
					{
						if(AntiCheatInfo[playerid][acACAllow][4]
						&& (AntiCheatInfo[playerid][acEnterVeh] != ac_vehid
						|| ac_gtc < AntiCheatInfo[playerid][acEnterVehTime] + 600))
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 4, 1);
							#else
								return ac_KickWithCode(playerid, "", 0, 4, 1);
							#endif
						}
					}
					else if(AntiCheatInfo[playerid][acVeh] != ac_vehid)
					{
						if(AntiCheatInfo[playerid][acACAllow][4])
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 4, 2);
							#else
								return ac_KickWithCode(playerid, "", 0, 4, 2);
							#endif
						}
					}
					else if(AntiCheatInfo[playerid][acACAllow][50]
					&& AntiCheatInfo[playerid][acSeat] != ac_s)
					{
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 50);
						#else
							return ac_KickWithCode(playerid, "", 0, 50);
						#endif
					}
					if(ac_stateanim == 2)
					{
						if(AntiCheatInfo[playerid][acACAllow][32]
						&& AntiCheatVehInfo[ac_vehid][acDriver] != 65535
						&& AntiCheatVehInfo[ac_vehid][acDriver] != playerid)
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 32);
							#else
								return ClearAnimations(playerid, 1);
							#endif
						}
						if(AntiCheatInfo[playerid][acACAllow][35]
						&& GetPlayerCameraMode(playerid) == 55)
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 35);
							#else
								return ac_KickWithCode(playerid, "", 0, 35);
							#endif
						}
						static Float:ac_vhealth;
						GetVehicleHealth(ac_vehid, ac_vhealth);
						if(AntiCheatInfo[playerid][acSetVehHealth] != -1)
						{
							if(ac_vhealth == AntiCheatInfo[playerid][acSetVehHealth]) AntiCheatInfo[playerid][acSetVehHealth] = -1;
							else if(AntiCheatInfo[playerid][acACAllow][52] && ac_gtc > AntiCheatInfo[playerid][acGtc][4]
							+ ac_gpp && ++AntiCheatInfo[playerid][acNOPCount][4] > AC_MAX_NOP_WARNINGS)
							{
								#if defined DEBUG
									printf(DEBUG_CODE_5, playerid, "SetVehicleHealth");
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 52, 11);
									AntiCheatInfo[playerid][acSetVehHealth] = -1;
								#else
									return ac_KickWithCode(playerid, "", 0, 52, 11);
								#endif
							}
						}
						else if(AntiCheatInfo[playerid][acACAllow][11]
						&& ac_vhealth > AntiCheatVehInfo[ac_vehid][acHealth]
						&& !AntiCheatInfo[playerid][acModShop])
						{
							#if AC_USE_PAYNSPRAY
								if(!ac_IsPlayerInPayNSpray(playerid, ac_i))
								{
							#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 11);
								#else
									return ac_KickWithCode(playerid, "", 0, 11);
								#endif
							#if AC_USE_PAYNSPRAY
								}
							#endif
						}
						if(AntiCheatInfo[playerid][acACAllow][20]
						&& AntiCheatInfo[playerid][acVehDmgRes])
						{
							if(ac_vhealth < AntiCheatVehInfo[ac_vehid][acHealth])
							{
								AntiCheatInfo[playerid][acVehDmgRes] = false;
								AntiCheatInfo[playerid][acCheatCount][11] = 0;
							}
							else if(ac_gtc > AntiCheatInfo[playerid][acGtc][16] + ac_gpp)
							{
								AntiCheatInfo[playerid][acVehDmgRes] = false;
								if(++AntiCheatInfo[playerid][acCheatCount][11]
								> AC_MAX_GODMODE_VEH_WARNINGS)
								{
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 20);
										AntiCheatInfo[playerid][acCheatCount][11] = 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 20);
									#endif
								}
							}
						}
						static Float:ac_zangle;
						GetVehicleZAngle(ac_vehid, ac_zangle);
						while(ac_zangle < 0.0) ac_zangle += 360.0;
						while(ac_zangle > 360.0) ac_zangle -= 360.0;
						GetVehicleVelocity(ac_vehid, ac_pvelX, ac_pvelY, ac_pvelZ);
						if(ac_gtc > AntiCheatInfo[playerid][acGtc][9] + ac_gpp)
						{
							static Float:ac_vsp, Float:ac_spdiff;
							ac_i = GetVehicleModel(ac_vehid) - 417;
							ac_vsp = ac_GetSpeed(ac_pvelX,ac_pvelY,ac_pvelZ);
							ac_spdiff = ac_vsp - ac_GetSpeed(AntiCheatVehInfo[ac_vehid][acVel][0],AntiCheatVehInfo[ac_vehid][acVel][1],AntiCheatVehInfo[ac_vehid][acVel][2]);
							if(AntiCheatInfo[playerid][acACAllow][10] && ac_spdiff >= 20.0 && AntiCheatVehInfo[ac_vehid][acSpeedDiff] <= ac_spdiff
							&& (63 < ac_i < 94 && ac_VehicleTypes[ac_i] != 4 || floatabs(ac_pvelX) > 0.3 || floatabs(ac_pvelY) > 0.3 || floatabs(ac_pvelZ) > 0.3)
							&& AntiCheatVehInfo[ac_vehid][acHealth] == ac_vhealth && AntiCheatVehInfo[ac_vehid][acHealth] > 220.0)
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 10, 1);
								#else
									return ac_KickWithCode(playerid, "", 0, 10, 1);
								#endif
							}
							if(AntiCheatInfo[playerid][acACAllow][25] && ac_vsp > 15.0 && floatabs(ac_spdiff) < 25.0
							&& floatround(floatabs(ac_zangle - AntiCheatVehInfo[ac_vehid][acZAngle])) == 180 && (ac_pvelX < 0.0)
							!= (AntiCheatVehInfo[ac_vehid][acVel][0] < 0.0) && (ac_pvelY < 0.0) != (AntiCheatVehInfo[ac_vehid][acVel][1] < 0.0)
							&& (ac_pvelZ < 0.0) != (AntiCheatVehInfo[ac_vehid][acVel][2] < 0.0))
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 25);
								#else
									return ac_KickWithCode(playerid, "", 0, 25);
								#endif
							}
							static Float:ac_zdiff;
							ac_zdiff = ac_pposZ - AntiCheatInfo[playerid][acPos][2];
							if(-1 < ac_i < 177 && 0 < ac_VehicleTypes[ac_i] < 3)
							{
								if(AntiCheatInfo[playerid][acACAllow][10] && ac_vsp > 269.0)
								{
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 10, 2);
									#else
										return ac_KickWithCode(playerid, "", 0, 10, 2);
									#endif
								}
							}
							else if(AntiCheatInfo[playerid][acACAllow][8])
							{
								if(ac_pvelZ >= 0.1 && ac_pvelZ > AntiCheatVehInfo[ac_vehid][acVel][2]
								&& floatabs(AntiCheatInfo[playerid][acPos][0] - ac_pposX) < ac_zdiff * 1.2
								&& floatabs(AntiCheatInfo[playerid][acPos][1] - ac_pposY) < ac_zdiff * 1.2)
								{
									if(++AntiCheatInfo[playerid][acCheatCount][3] > (63 < ac_i < 94
									&& ac_VehicleTypes[ac_i] == 4 ? AC_MAX_FLYHACK_B_WARNINGS
									: AC_MAX_FLYHACK_VEH_WARNINGS))
									{
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 8, 1);
											AntiCheatInfo[playerid][acCheatCount][3] = 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 8, 1);
										#endif
									}
								}
								else AntiCheatInfo[playerid][acCheatCount][3] = 0;
							}
							if(ac_vctsize > 0.4 && ac_gtc > AntiCheatInfo[playerid][acGtc][11] + ac_gpp)
							{
								if(ac_vctsize > 15.0 && ac_vctsize
								> AntiCheatVehInfo[ac_vehid][acPosDiff] + ((ac_vctsize / 3) * 1.5))
								{
									if(AntiCheatInfo[playerid][acACAllow][3]
									&& AntiCheatInfo[playerid][acPos][2] > -97.0)
									{
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 3, 2);
										#else
											return ac_KickWithCode(playerid, "", 0, 3, 2);
										#endif
									}
								}
								else if(AntiCheatInfo[playerid][acACAllow][1] && ac_vsp < 16.0 && ac_vctsize > 0.8
								&& ++AntiCheatInfo[playerid][acCheatCount][2] > AC_MAX_AIR_VEH_WARNINGS)
								{
									#undef AC_MAX_AIR_VEH_WARNINGS
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 1);
										AntiCheatInfo[playerid][acCheatCount][2] = 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 1);
									#endif
								}
							}
							AntiCheatVehInfo[ac_vehid][acSpeedDiff] = ac_spdiff;
						}
						AntiCheatVehInfo[ac_vehid][acVel][0] = ac_pvelX;
						AntiCheatVehInfo[ac_vehid][acVel][1] = ac_pvelY;
						AntiCheatVehInfo[ac_vehid][acVel][2] = ac_pvelZ;
						AntiCheatVehInfo[ac_vehid][acPosDiff] = ac_vctsize;
						AntiCheatVehInfo[ac_vehid][acHealth] = ac_vhealth;
						AntiCheatVehInfo[ac_vehid][acZAngle] = ac_zangle;
					}
					AntiCheatInfo[playerid][acSeat] = ac_s;
				}
				else
				{
					ac_stateanim = GetPlayerAnimationIndex(playerid);
					GetPlayerVelocity(playerid, ac_pvelX, ac_pvelY, ac_pvelZ);
					ac_pvelX = ac_GetSpeed(ac_pvelX,ac_pvelY,ac_pvelZ);
					if(AntiCheatInfo[playerid][acAnim] != ac_stateanim)
					{
						switch(ac_stateanim)
						{
							case -1:
							{
								if(AntiCheatInfo[playerid][acACAllow][24])
								{
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 24);
									#else
										return ac_KickWithCode(playerid, "", 0, 24);
									#endif
								}
							}
							case 958..979:
							{
								if(AntiCheatInfo[playerid][acACAllow][7] && ac_w != 46)
								{
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 7, 1);
									#else
										return ac_KickWithCode(playerid, "", 0, 7, 1);
									#endif
								}
							}
							case 1058:
							{
								if(AntiCheatInfo[playerid][acACAllow][7])
								{
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 7, 2);
									#else
										return ac_KickWithCode(playerid, "", 0, 7, 2);
									#endif
								}
							}
							case 1231:
							{
								if(AntiCheatInfo[playerid][acACAllow][30])
								{
									ac_i = GetPlayerSkin(playerid);
									if(!ac_PedAnims && ac_i && ac_i != 74)
									{
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 30);
										#else
											return ac_KickWithCode(playerid, "", 0, 30);
										#endif
									}
								}
							}
						}
					}
					else if(AntiCheatInfo[playerid][acACAllow][7]
					&& ac_pvelX > 30.0 && 1537 < ac_stateanim < 1545)
					{
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 7, 3);
						#else
							return ac_KickWithCode(playerid, "", 0, 7, 3);
						#endif
					}
					if(AntiCheatInfo[playerid][acSet][4] != -1)
					{
						if(ac_specact == AntiCheatInfo[playerid][acSet][4]) AntiCheatInfo[playerid][acSet][4] = -1;
						else if(AntiCheatInfo[playerid][acACAllow][52] && ac_gtc > AntiCheatInfo[playerid][acGtc][6] + ac_gpp
						&& ++AntiCheatInfo[playerid][acNOPCount][6] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerSpecialAction");
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 52, 12);
								AntiCheatInfo[playerid][acSet][4] = -1;
							#else
								return ac_KickWithCode(playerid, "", 0, 52, 12);
							#endif
						}
					}
					else if(ac_specact != AntiCheatInfo[playerid][acSpecAct])
					{
						if(ac_specact == AntiCheatInfo[playerid][acNextSpecAct]) AntiCheatInfo[playerid][acNextSpecAct] = -1;
						else if(AntiCheatInfo[playerid][acACAllow][18])
						{
							switch(ac_specact)
							{
								case 0:
								{
									switch(AntiCheatInfo[playerid][acSpecAct])
									{
										case 11, 24, 25:
										{
											#if defined OnCheatDetected
												ac_KickWithCode(playerid, "", 0, 18, 1);
											#else
												return ac_KickWithCode(playerid, "", 0, 18, 1);
											#endif
										}
									}
								}
								case 1:
								{
									if(AntiCheatInfo[playerid][acSpecAct]
									&& !(19 < AntiCheatInfo[playerid][acSpecAct] < 25))
									{
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 18, 2);
										#else
											return ac_KickWithCode(playerid, "", 0, 18, 2);
										#endif
									}
								}
								case 2:
								{
									if(!IsPlayerInRangeOfPoint(playerid, 5.0, AntiCheatInfo[playerid][acDropJP][0],
									AntiCheatInfo[playerid][acDropJP][1], AntiCheatInfo[playerid][acDropJP][2]))
									{
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 18, 3);
										#else
											return ac_KickWithCode(playerid, "", 0, 18, 3);
										#endif
									}
									AntiCheatInfo[playerid][acDropJP][0] =
									AntiCheatInfo[playerid][acDropJP][1] =
									AntiCheatInfo[playerid][acDropJP][2] = 20001.0;
								}
								case 3:
								{
									switch(AntiCheatInfo[playerid][acSpecAct])
									{
										case 2, 5..8, 11, 68:
										{
											#if defined OnCheatDetected
												ac_KickWithCode(playerid, "", 0, 18, 4);
											#else
												return ac_KickWithCode(playerid, "", 0, 18, 4);
											#endif
										}
									}
								}
								default:
								{
									if(!(19 < ac_specact < 25 && AntiCheatInfo[playerid][acSpecAct] == 1
									&& ac_specact == AntiCheatInfo[playerid][acLastSpecAct])
									&& !((ac_specact == 4 || ac_specact == 11 || ac_specact == 24 || ac_specact == 25)
									&& AntiCheatInfo[playerid][acVeh]) && !(AntiCheatInfo[playerid][acSpecAct] == 3
									&& ac_specact == AntiCheatInfo[playerid][acLastSpecAct]))
									{
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 18, 5);
										#else
											return ac_KickWithCode(playerid, "", 0, 18, 5);
										#endif
									}
								}
							}
						}
						AntiCheatInfo[playerid][acLastSpecAct] = AntiCheatInfo[playerid][acSpecAct];
					}
					if(ac_gtc > AntiCheatInfo[playerid][acGtc][10] + ac_gpp
					&& GetPlayerSurfingVehicleID(playerid) == 65535
					&& GetPlayerSurfingObjectID(playerid) == 65535)
					{
						if(AntiCheatInfo[playerid][acACAllow][9] && ac_pvelX > 212.0
						&& AntiCheatInfo[playerid][acSpeed] < ac_pvelX)
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 9);
							#else
								return ac_KickWithCode(playerid, "", 0, 9);
							#endif
						}
						if(ac_vctsize > 0.5 && ac_gtc
						> AntiCheatInfo[playerid][acGtc][11] + ac_gpp)
						{
							if(ac_vctsize > 30.0)
							{
								if(AntiCheatInfo[playerid][acACAllow][2]
								&& AntiCheatInfo[playerid][acPos][2] > -97.0)
								{
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 2, 2);
									#else
										return ac_KickWithCode(playerid, "", 0, 2, 2);
									#endif
								}
							}
							else if(ac_pvelX <= ac_vctsize * (ac_vctsize < 1.0 ? 30.0 : 5.0))
							{
								if(ac_pvelX < 3.0 && ac_vctsize > 3.0)
								{
									if(AntiCheatInfo[playerid][acACAllow][2])
									{
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 2, 3);
										#else
											return ac_KickWithCode(playerid, "", 0, 2, 3);
										#endif
									}
								}
								else if(AntiCheatInfo[playerid][acACAllow][0] && ac_pvelX
								&& ++AntiCheatInfo[playerid][acCheatCount][1] > AC_MAX_AIR_WARNINGS)
								{
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 0);
										AntiCheatInfo[playerid][acCheatCount][1] = 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 0);
									#endif
								}
								#undef AC_MAX_AIR_WARNINGS
							}
						}
						AntiCheatInfo[playerid][acSpeed] = ac_pvelX;
					}
					AntiCheatInfo[playerid][acAnim] = ac_stateanim;
				}
				AntiCheatInfo[playerid][acSpecAct] = ac_specact;
				AntiCheatInfo[playerid][acHealth] = floatround(ac_health, floatround_tozero);
				AntiCheatInfo[playerid][acArmour] = floatround(ac_armour, floatround_tozero);
			}
			AntiCheatInfo[playerid][acPos][0] = ac_pposX;
			AntiCheatInfo[playerid][acPos][1] = ac_pposY;
			AntiCheatInfo[playerid][acPos][2] = ac_pposZ;
			AntiCheatInfo[playerid][acLastWeapon] = ac_w;
			AntiCheatInfo[playerid][acVeh] = ac_vehid;
			AntiCheatInfo[playerid][acMoney] = ac_a;
		}
	}
	ac_gpp = 1;
	AntiCheatInfo[playerid][acLastUpdate] = ac_gtc;
	if(ac_ur) AntiCheatInfo[playerid][acGtc][15] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerUpdate
		ac_gpp = ac_OnPlayerUpdate(playerid);
	#endif
	if(AntiCheatInfo[playerid][acACAllow][33]
	&& ac_gpp) return AntiCheatInfo[playerid][acFreeze];
	return ac_gpp;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerUpdate
		#undef OnPlayerUpdate
	#else
		#define _ALS_OnPlayerUpdate
	#endif
	#define OnPlayerUpdate ac_OnPlayerUpdate
	#if defined ac_OnPlayerUpdate
		forward ac_OnPlayerUpdate(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
#else
	public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
#endif
{
	if(newkeys & 16 && AntiCheatInfo[playerid][acSpecAct] == 2
	&& GetPlayerSpecialAction(playerid) != 2)
	{
		AntiCheatInfo[playerid][acDropJP][0] = AntiCheatInfo[playerid][acPos][0];
		AntiCheatInfo[playerid][acDropJP][1] = AntiCheatInfo[playerid][acPos][1];
		AntiCheatInfo[playerid][acDropJP][2] = AntiCheatInfo[playerid][acPos][2];
	}
	if((newkeys & 2) && 23 < GetPlayerWeapon(playerid) < 26) AntiCheatInfo[playerid][acCheatCount][14] = 0;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerKeyStateChange
		return ac_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerKeyStateChange
		#undef OnPlayerKeyStateChange
	#else
		#define _ALS_OnPlayerKeyStateChange
	#endif
	#define OnPlayerKeyStateChange ac_OnPlayerKeyStateChange
	#if defined ac_OnPlayerKeyStateChange
		forward ac_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
#else
	public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][2] + ac_Mtfc[2][0]) return ac_FloodDetect(playerid, 2);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][2] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][2] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickMap
		return ac_OnPlayerClickMap(playerid, fX, fY, fZ);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickMap
		#undef OnPlayerClickMap
	#else
		#define _ALS_OnPlayerClickMap
	#endif
	#define OnPlayerClickMap ac_OnPlayerClickMap
	#if defined ac_OnPlayerClickMap
		forward ac_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerClickPlayer(playerid, clickedplayerid, source)
#else
	public OnPlayerClickPlayer(playerid, clickedplayerid, source)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][3] + ac_Mtfc[3][0]) return ac_FloodDetect(playerid, 3);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][3] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][3] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickPlayer
		return ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickPlayer
		#undef OnPlayerClickPlayer
	#else
		#define _ALS_OnPlayerClickPlayer
	#endif
	#define OnPlayerClickPlayer ac_OnPlayerClickPlayer
	#if defined ac_OnPlayerClickPlayer
		forward ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerClickTextDraw(playerid, Text:clickedid)
#else
	public OnPlayerClickTextDraw(playerid, Text:clickedid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][4] + ac_Mtfc[4][0]) return ac_FloodDetect(playerid, 4);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][4] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][4] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickTextDraw
		return ac_OnPlayerClickTextDraw(playerid, clickedid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickTextDraw
		#undef OnPlayerClickTextDraw
	#else
		#define _ALS_OnPlayerClickTextDraw
	#endif
	#define OnPlayerClickTextDraw ac_OnPlayerClickTextDraw
	#if defined ac_OnPlayerClickTextDraw
		forward ac_OnPlayerClickTextDraw(playerid, Text:clickedid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerCommandText(playerid, cmdtext[])
#else
	public OnPlayerCommandText(playerid, cmdtext[])
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 1;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][5] + ac_Mtfc[5][0])
		{
			ac_FloodDetect(playerid, 5);
			return 1;
		}
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][5] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][5] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerCommandText
		return ac_OnPlayerCommandText(playerid, cmdtext);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerCommandText
		#undef OnPlayerCommandText
	#else
		#define _ALS_OnPlayerCommandText
	#endif
	#define OnPlayerCommandText ac_OnPlayerCommandText
	#if defined ac_OnPlayerCommandText
		forward ac_OnPlayerCommandText(playerid, cmdtext[]);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
#else
	public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
#endif
{
	if(!IsPlayerConnected(playerid)
	|| AntiCheatInfo[playerid][acKicked]) return 0;
	new bool:ac_ur;
	if(!IsPlayerNPC(playerid))
	{
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][6] + ac_Mtfc[6][0]) return ac_FloodDetect(playerid, 6);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][6] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][6] = ac_i;
		ac_i = GetVehicleModel(vehicleid) - 417;
		if(AntiCheatInfo[playerid][acACAllow][44]
		&& ac_i == -417) return ac_KickWithCode(playerid, "", 0, 44, 1);
		new Float:ac_TmpPosX, Float:ac_TmpPosY, Float:ac_TmpPosZ;
		GetVehiclePos(vehicleid, ac_TmpPosX, ac_TmpPosY, ac_TmpPosZ);
		ac_TmpPosX = VectorSize(AntiCheatInfo[playerid][acPos][0]
		- ac_TmpPosX, AntiCheatInfo[playerid][acPos][1] - ac_TmpPosY,
		AntiCheatInfo[playerid][acPos][2] - ac_TmpPosZ);
		if(AntiCheatInfo[playerid][acACAllow][4] && (!(ac_i == 160
		|| ac_i == 175) && ac_TmpPosX > 15.0 || ac_TmpPosX > 40.0))
		{
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 4, 3);
			#else
				return ac_KickWithCode(playerid, "", 0, 4, 3);
			#endif
		}
		if(AntiCheatInfo[playerid][acEnterVeh] == vehicleid) ac_ur = true;
		else
		{
			new ac_TmpPrm1, ac_TmpPrm2;
			GetVehicleParamsEx(vehicleid, ac_TmpPrm2, ac_TmpPrm2,
			ac_TmpPrm2, ac_TmpPrm1, ac_TmpPrm2, ac_TmpPrm2, ac_TmpPrm2);
			if(ac_TmpPrm1 != 1)
			{
				AntiCheatInfo[playerid][acEnterVeh] = vehicleid;
				if(12 < ac_i < 179 && ac_VehicleTypes[ac_i]
				== 3) AntiCheatInfo[playerid][acEnterVehTime] = 0, ac_ur = true;
			}
		}
	}
	if(!ac_ur) AntiCheatInfo[playerid][acEnterVehTime] = AntiCheatInfo[playerid][acCall][27];
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerEnterVehicle
		return ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerEnterVehicle
		#undef OnPlayerEnterVehicle
	#else
		#define _ALS_OnPlayerEnterVehicle
	#endif
	#define OnPlayerEnterVehicle ac_OnPlayerEnterVehicle
	#if defined ac_OnPlayerEnterVehicle
		forward ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerExitVehicle(playerid, vehicleid)
#else
	public OnPlayerExitVehicle(playerid, vehicleid)
#endif
{
	if(!IsPlayerConnected(playerid)
	|| AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(!IsPlayerNPC(playerid) && AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][7] + ac_Mtfc[7][0]) return ac_FloodDetect(playerid, 7);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][7] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][7] = ac_i;
	ac_i = GetVehicleModel(AntiCheatInfo[playerid][acVeh]) - 417;
	if(-1 < ac_i < 177 && ac_VehicleTypes[ac_i] == 2) AntiCheatInfo[playerid][acParachute] = true;
	else AntiCheatInfo[playerid][acParachute] = false;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerExitVehicle
		return ac_OnPlayerExitVehicle(playerid, vehicleid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerExitVehicle
		#undef OnPlayerExitVehicle
	#else
		#define _ALS_OnPlayerExitVehicle
	#endif
	#define OnPlayerExitVehicle ac_OnPlayerExitVehicle
	#if defined ac_OnPlayerExitVehicle
		forward ac_OnPlayerExitVehicle(playerid, vehicleid);
	#endif
#endif

#if defined OnPlayerPickUpDynamicPickup\
	&& defined IsValidDynamicPickup
	#if defined _inc_y_hooks || defined _INC_y_hooks
		#if defined STREAMER_ENABLE_TAGS
			Hook:ac_OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP pickupid)
		#else
			Hook:ac_OnPlayerPickUpDynamicPickup(playerid, pickupid)
		#endif
	#else
		#if defined STREAMER_ENABLE_TAGS
			public OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP pickupid)
		#else
			public OnPlayerPickUpDynamicPickup(playerid, pickupid)
		#endif
	#endif
	{
		if(!IsPlayerConnected(playerid) || AntiCheatInfo[playerid][acKicked]
		|| !IsValidDynamicPickup(pickupid)) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][8] + ac_Mtfc[8][0]) ac_FloodDetect(playerid, 8);
			else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][8] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][8] = ac_i;
		if(pickupid < MAX_PICKUPS)
		{
			if(AntiCheatInfo[playerid][acACAllow][6] && !IsPlayerInRangeOfPoint(playerid, 5.0,
			AntiCheatDPickInfo[pickupid][acPos][0], AntiCheatDPickInfo[pickupid][acPos][1],
			AntiCheatDPickInfo[pickupid][acPos][2]))
			{
				#if defined OnCheatDetected
					ac_KickWithCode(playerid, "", 0, 6, 2);
				#else
					return ac_KickWithCode(playerid, "", 0, 6, 2);
				#endif
			}
			switch(AntiCheatDPickInfo[pickupid][acType])
			{
				case 1:
				{
					ac_i = ac_WeaponSlots[AntiCheatDPickInfo[pickupid][acWeapon]];
					if(AntiCheatInfo[playerid][acWeapon][ac_i]
					== AntiCheatDPickInfo[pickupid][acWeapon]) AntiCheatInfo[playerid][acAmmo][ac_i] +=
					ac_PickupAmmo[AntiCheatDPickInfo[pickupid][acWeapon]];
				}
				case 2: AntiCheatInfo[playerid][acSpecAct] = 2;
				case 3: AntiCheatInfo[playerid][acHealth] = 100;
				case 4: AntiCheatInfo[playerid][acArmour] = 100;
			}
		}
		AntiCheatInfo[playerid][acLastPickup] = pickupid + MAX_PICKUPS;
		AntiCheatInfo[playerid][acPicked] = true;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerPickUpDynamicPickup
			return ac_OnPlayerPickUpDynamicPickup(playerid, pickupid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerPickUpDynamicPicku\
			|| defined _ALS_OnPlayerPickUpDynamicPick || defined _ALS_OnPlayer\
			PickUpDynamicPickup
			#undef OnPlayerPickUpDynamicPickup
		#else
			#define _ALS_OnPlayerPickUpDynamicPickup
		#endif
		#define OnPlayerPickUpDynamicPickup ac_OnPlayerPickUpDynamicPickup
		#if defined ac_OnPlayerPickUpDynamicPickup
			#if defined STREAMER_ENABLE_TAGS
				forward ac_OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP pickupid);
			#else
				forward ac_OnPlayerPickUpDynamicPickup(playerid, pickupid);
			#endif
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerPickUpPickup(playerid, pickupid)
#else
	public OnPlayerPickUpPickup(playerid, pickupid)
#endif
{
	if(!IsPlayerConnected(playerid)
	|| AntiCheatInfo[playerid][acKicked]) return 0;
	if(!AntiCheatInfo[playerid][acPicked])
	{
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][8] + ac_Mtfc[8][0]) ac_FloodDetect(playerid, 8);
			else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][8] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		if(AntiCheatInfo[playerid][acACAllow][6] && (!(-1 < pickupid < MAX_PICKUPS)
		|| !IsPlayerInRangeOfPoint(playerid, 5.0, AntiCheatPickInfo[pickupid][acPos][0],
		AntiCheatPickInfo[pickupid][acPos][1], AntiCheatPickInfo[pickupid][acPos][2])))
		{
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 6, 1);
			#else
				return ac_KickWithCode(playerid, "", 0, 6, 1);
			#endif
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][8] = ac_i;
		switch(AntiCheatPickInfo[pickupid][acType])
		{
			case 1:
			{
				ac_i = ac_WeaponSlots[AntiCheatPickInfo[pickupid][acWeapon]];
				if(AntiCheatInfo[playerid][acWeapon][ac_i]
				== AntiCheatPickInfo[pickupid][acWeapon]) AntiCheatInfo[playerid][acAmmo][ac_i] +=
				ac_PickupAmmo[AntiCheatPickInfo[pickupid][acWeapon]];
			}
			case 2: AntiCheatInfo[playerid][acSpecAct] = 2;
			case 3: AntiCheatInfo[playerid][acHealth] = 100;
			case 4: AntiCheatInfo[playerid][acArmour] = 100;
		}
		AntiCheatInfo[playerid][acLastPickup] = pickupid;
	}
	else AntiCheatInfo[playerid][acPicked] = false;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerPickUpPickup
		if(!AntiCheatPickInfo[pickupid][acIsStatic]) return ac_OnPlayerPickUpPickup(playerid, pickupid);
		return 1;
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerPickUpPickup
		#undef OnPlayerPickUpPickup
	#else
		#define _ALS_OnPlayerPickUpPickup
	#endif
	#define OnPlayerPickUpPickup ac_OnPlayerPickUpPickup
	#if defined ac_OnPlayerPickUpPickup
		forward ac_OnPlayerPickUpPickup(playerid, pickupid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerRequestClass(playerid, classid)
#else
	public OnPlayerRequestClass(playerid, classid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][9] + ac_Mtfc[9][0]) return ac_FloodDetect(playerid, 9);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][9] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acClassid] = classid;
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][9] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerRequestClass
		return ac_OnPlayerRequestClass(playerid, classid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerRequestClass
		#undef OnPlayerRequestClass
	#else
		#define _ALS_OnPlayerRequestClass
	#endif
	#define OnPlayerRequestClass ac_OnPlayerRequestClass
	#if defined ac_OnPlayerRequestClass
		forward ac_OnPlayerRequestClass(playerid, classid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerSelectedMenuRow(playerid, row)
#else
	public OnPlayerSelectedMenuRow(playerid, row)
#endif
{
	if(!IsPlayerConnected(playerid)
	|| AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][10] + ac_Mtfc[10][0]) ac_FloodDetect(playerid, 10);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][10] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][10] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerSelectedMenuRow
		return ac_OnPlayerSelectedMenuRow(playerid, row);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerSelectedMenuRow
		#undef OnPlayerSelectedMenuRow
	#else
		#define _ALS_OnPlayerSelectedMenuRow
	#endif
	#define OnPlayerSelectedMenuRow ac_OnPlayerSelectedMenuRow
	#if defined ac_OnPlayerSelectedMenuRow
		forward ac_OnPlayerSelectedMenuRow(playerid, row);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerStateChange(playerid, newstate, oldstate)
#else
	public OnPlayerStateChange(playerid, newstate, oldstate)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount(), bool:ac_ur;
	if(!IsPlayerNPC(playerid))
	{
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][11] + ac_Mtfc[11][0])
			{
				if(!(newstate == 1 && oldstate == 8)) ac_FloodDetect(playerid, 11);
			}
			else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][11] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		if(1 < oldstate < 4)
		{
			switch(oldstate)
			{
				case 2:
				{
					if(AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver]
					== playerid) AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver] = 65535;
					if(GetVehicleModel(AntiCheatInfo[playerid][acVeh]) == 457
					&& !AntiCheatInfo[playerid][acWeapon][1]) AntiCheatInfo[playerid][acWeapon][1] = 2;
				}
				case 3:
				{
					if(AntiCheatInfo[playerid][acACAllow][2]
					&& newstate == 1 && !IsPlayerInRangeOfPoint(playerid, 15.0,
					AntiCheatInfo[playerid][acPos][0], AntiCheatInfo[playerid][acPos][1],
					AntiCheatInfo[playerid][acPos][2]) && !(AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver]
					!= 65535 && ac_i > AntiCheatInfo[AntiCheatVehInfo[AntiCheatInfo[playerid][acVeh]][acDriver]][acLastUpdate]
					+ 2000)) ac_KickWithCode(playerid, "", 0, 2, 4);
				}
			}
			new Float:ac_TmpVelX, Float:ac_TmpVelY, Float:ac_TmpVelZ;
			GetPlayerVelocity(playerid, ac_TmpVelX, ac_TmpVelY, ac_TmpVelZ);
			AntiCheatInfo[playerid][acSpeed] = ac_GetSpeed(ac_TmpVelX,ac_TmpVelY,ac_TmpVelZ);
			ac_ur = true;
		}
		switch(newstate)
		{
			case 1:
			{
				AntiCheatInfo[playerid][acSet][11] = -1;
				AntiCheatInfo[playerid][acEnterVeh] = 0;
				GetPlayerPos(playerid, AntiCheatInfo[playerid][acPos][0],
				AntiCheatInfo[playerid][acPos][1], AntiCheatInfo[playerid][acPos][2]);
			}
			case 2:
			{
				ac_i = GetPlayerVehicleID(playerid);
				if(AntiCheatInfo[playerid][acACAllow][44])
				{
					new ac_seatid = GetPlayerVehicleSeat(playerid);
					if(ac_seatid != 128)
					{
						new ac_model = GetVehicleModel(ac_i) - 400;
						if(ac_seatid || ac_model < 0 || ac_MaxPassengers[ac_model >>> 3] >>> ((ac_model & 7) << 2) & 0xF == 15
						&& AntiCheatInfo[playerid][acSet][9] == -1) ac_KickWithCode(playerid, "", 0, 44, 2);
					}
				}
				if(AntiCheatInfo[playerid][acSet][9] == -1)
				{
					AntiCheatVehInfo[ac_i][acDriver] = playerid;
					GetVehicleZAngle(ac_i, AntiCheatVehInfo[ac_i][acZAngle]);
					GetPlayerPos(playerid, AntiCheatInfo[playerid][acPos][0],
					AntiCheatInfo[playerid][acPos][1], AntiCheatInfo[playerid][acPos][2]);
					AntiCheatInfo[playerid][acCheatCount][11] = 0;
					AntiCheatInfo[playerid][acVehDmgRes] = false;
					AntiCheatInfo[playerid][acSetVehHealth] = -1;
				}
			}
			case 3:
			{
				AntiCheatInfo[playerid][acCheatCount][4] = 0;
				if(AntiCheatInfo[playerid][acACAllow][44] && (ac_i = GetPlayerVehicleSeat(playerid)) != 128)
				{
					new ac_model = GetVehicleModel(GetPlayerVehicleID(playerid)) - 400;
					if(ac_model < 0) ac_KickWithCode(playerid, "", 0, 44, 3);
					else
					{
						ac_model = (ac_MaxPassengers[ac_model >>> 3] >>> ((ac_model & 7) << 2)) & 0xF;
						if(ac_i < 1 || (ac_model == 15 || ac_i > ac_model)
						&& AntiCheatInfo[playerid][acSet][9] == -1) ac_KickWithCode(playerid, "", 0, 44, 4);
					}
				}
			}
			case 9:
			{
				if(AntiCheatInfo[playerid][acACAllow][21]
				&& AntiCheatInfo[playerid][acSet][6]
				== -1) ac_KickWithCode(playerid, "", 0, 21);
				AntiCheatInfo[playerid][acSet][6] = -1;
				AntiCheatInfo[playerid][acSpawnTime] = 0;
			}
		}
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][11] = GetTickCount();
	if(ac_ur) AntiCheatInfo[playerid][acGtc][10] = AntiCheatInfo[playerid][acCall][27];
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerStateChange
		return ac_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerStateChange
		#undef OnPlayerStateChange
	#else
		#define _ALS_OnPlayerStateChange
	#endif
	#define OnPlayerStateChange ac_OnPlayerStateChange
	#if defined ac_OnPlayerStateChange
		forward ac_OnPlayerStateChange(playerid, newstate, oldstate);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
#else
	public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	static ac_i, ac_gtc, bool:ac_ur, bool:ac_ur2;
	ac_gtc = GetTickCount();
	ac_ur = ac_ur2 = false;
	if(!IsPlayerNPC(playerid))
	{
		if(AntiCheatInfo[playerid][acACAllow][22]
		&& !ac_LagCompMode) return ac_KickWithCode(playerid, "", 0, 22);
		if(!(-1 < hittype < 5) || hittype == 1 && !IsPlayerConnected(hitid)
		|| hittype == 2 && !GetVehicleModel(hitid) || hittype == 3 && !IsValidObject(hitid)
		|| hittype == 4 && !IsValidPlayerObject(playerid, hitid)) return ac_KickWithCode(playerid, "", 0, 47);
		if(AntiCheatInfo[playerid][acACAllow][34])
		{
			if(ac_gtc > AntiCheatInfo[playerid][acLastUpdate] + 5000)
			{
				if(++AntiCheatInfo[playerid][acCheatCount][5] > AC_MAX_AFK_GHOST_WARNINGS)
				{
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 34);
						AntiCheatInfo[playerid][acCheatCount][5] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 34);
					#endif
				}
				#undef AC_MAX_AFK_GHOST_WARNINGS
			}
			else AntiCheatInfo[playerid][acCheatCount][5] = 0;
		}
		if(AntiCheatInfo[playerid][acACAllow][29])
		{
			if(hittype && !fX && !fY && !fZ)
			{
				if(++AntiCheatInfo[playerid][acCheatCount][13] > AC_MAX_SILENT_AIM_WARNINGS)
				{
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 29, 1);
						AntiCheatInfo[playerid][acCheatCount][13] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 29, 1);
					#endif
				}
				#undef AC_MAX_SILENT_AIM_WARNINGS
			}
			else
			{
				AntiCheatInfo[playerid][acCheatCount][13] = 0;
				if(hittype == 1 && ac_gtc < AntiCheatInfo[hitid][acLastUpdate] + 1500 && !IsPlayerInAnyVehicle(hitid)
				&& GetPlayerSurfingVehicleID(hitid) == 65535 && GetPlayerSurfingObjectID(hitid) == 65535)
				{
					static Float:ac_fPosX, Float:ac_fPosY, Float:ac_fPosZ, Float:ac_fPosD;
					GetPlayerLastShotVectors(playerid, ac_fPosD, ac_fPosD, ac_fPosD, ac_fPosX, ac_fPosY, ac_fPosZ);
					if(!IsPlayerInRangeOfPoint(hitid, 5.0, ac_fPosX, ac_fPosY, ac_fPosZ))
					{
						if(++AntiCheatInfo[playerid][acCheatCount][6] > AC_MAX_PRO_AIM_WARNINGS)
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 29, 2);
								AntiCheatInfo[playerid][acCheatCount][6] = 0;
							#else
								return ac_KickWithCode(playerid, "", 0, 29, 2);
							#endif
						}
						#undef AC_MAX_PRO_AIM_WARNINGS
					}
					else AntiCheatInfo[playerid][acCheatCount][6] = 0;
				}
			}
		}
		static ac_t;
		switch(hittype)
		{
			case 1:
			{
				if(AntiCheatInfo[hitid][acACAllow][19]
				&& AntiCheatInfo[hitid][acFreeze])
				{
					ac_t = GetPlayerTeam(playerid);
					ac_i = GetPlayerInterior(hitid);
					if(AntiCheatInfo[hitid][acHealth]
					|| (ac_t == 255 || ac_t != GetPlayerTeam(hitid)))
					{
						#if AC_USE_RESTAURANTS
							if(!ac_IsPlayerInRestaurant(hitid, ac_i))
							{
						#endif
							#if AC_USE_AMMUNATIONS
								if(!ac_IsPlayerInAmmuNation(hitid, ac_i))
								{
							#endif
								#if AC_USE_CASINOS
									if(!ac_IsPlayerInCasino(hitid, ac_i))
									{
								#endif
									ac_ur = true;
								#if AC_USE_CASINOS
									}
								#endif
							#if AC_USE_AMMUNATIONS
								}
							#endif
						#if AC_USE_RESTAURANTS
							}
						#endif
					}
				}
			}
			case 2:
			{
				if(AntiCheatInfo[hitid][acACAllow][20]
				&& AntiCheatVehInfo[hitid][acDriver] != 65535
				&& AntiCheatInfo[AntiCheatVehInfo[hitid][acDriver]][acFreeze]
				&& AntiCheatVehInfo[hitid][acHealth] > 220.0)
				{
					ac_t = GetPlayerTeam(playerid);
					if(!ac_VehFriendlyFire || ac_t == 255 || ac_t
					!= GetPlayerTeam(AntiCheatVehInfo[hitid][acDriver])) ac_ur2 = true;
				}
			}
		}
		if((ac_t = GetPlayerState(playerid)) != 2)
		{
			if(AntiCheatInfo[playerid][acACAllow][26])
			{
				ac_i = ac_gtc - AntiCheatInfo[playerid][acShotTime];
				if(AntiCheatInfo[playerid][acLastShot] == weaponid)
				{
					if(weaponid != 38 && ac_t != 3)
					{
						if(ac_gtc < AntiCheatInfo[playerid][acReload] + 800)
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 26, 4);
								AntiCheatInfo[playerid][acReload] = 0;
							#else
								return ac_KickWithCode(playerid, "", 0, 26, 4);
							#endif
						}
						else if(ac_i < 30 || ac_i < 50 && weaponid != 32
						&& !(27 < weaponid < 30) || ac_i < 386 && 32 < weaponid < 35)
						{
							if(++AntiCheatInfo[playerid][acCheatCount][8]
							> AC_MAX_RAPID_FIRE_WARNINGS)
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 26, 1);
									AntiCheatInfo[playerid][acCheatCount][8] = 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 26, 1);
								#endif
							}
						}
						else AntiCheatInfo[playerid][acCheatCount][8] = 0;
						if((weaponid == 24 && ac_i < 700 || weaponid == 25 && ac_i < 1000)
						&& ++AntiCheatInfo[playerid][acCheatCount][14] > AC_MAX_RAPID_FIRE_WARNINGS)
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 26, 2);
								AntiCheatInfo[playerid][acCheatCount][14] = 0;
							#else
								return ac_KickWithCode(playerid, "", 0, 26, 2);
							#endif
						}
					}
				}
				else if(ac_i < 30)
				{
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 26, 3);
					#else
						return ac_KickWithCode(playerid, "", 0, 26, 3);
					#endif
				}
				if(GetPlayerWeaponState(playerid) == 1) AntiCheatInfo[playerid][acReload] = ac_gtc;
			}
			if(AntiCheatInfo[playerid][acACAllow][17] && ac_t != 3)
			{
				ac_t = GetPlayerAmmo(playerid);
				if(!AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]])
				{
					if(ac_gtc > AntiCheatInfo[playerid][acGtc][7] + GetPlayerPing(playerid) + 150)
					{
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 17, 1);
							AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] = ac_t;
						#else
							return ac_KickWithCode(playerid, "", 0, 17, 1);
						#endif
					}
					else return 0;
				}
				if((ac_i = ac_abs(AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] - ac_t)))
				{
					switch(weaponid)
					{
						case 24, 29:
						{
							if(ac_i > 2 || ++AntiCheatInfo[playerid][acCheatCount][7] > 2)
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 17, 2);
									AntiCheatInfo[playerid][acCheatCount][7] = 0;
									AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] = ac_t;
								#else
									return ac_KickWithCode(playerid, "", 0, 17, 2);
								#endif
							}
						}
						case 22, 26:
						{
							if(ac_i > 3 || ++AntiCheatInfo[playerid][acCheatCount][7] > 3)
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 17, 3);
									AntiCheatInfo[playerid][acCheatCount][7] = 0;
									AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] = ac_t;
								#else
									return ac_KickWithCode(playerid, "", 0, 17, 3);
								#endif
							}
						}
						case 30, 31:
						{
							if(ac_i > 3 || ++AntiCheatInfo[playerid][acCheatCount][7] > 4)
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 17, 4);
									AntiCheatInfo[playerid][acCheatCount][7] = 0;
									AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] = ac_t;
								#else
									return ac_KickWithCode(playerid, "", 0, 17, 4);
								#endif
							}
						}
						case 28, 32:
						{
							if(ac_i > 8)
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 17, 5);
									AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] = ac_t;
								#else
									return ac_KickWithCode(playerid, "", 0, 17, 5);
								#endif
							}
						}
						case 38:
						{
							if(++AntiCheatInfo[playerid][acCheatCount][7] > 8)
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 17, 6);
									AntiCheatInfo[playerid][acCheatCount][7] = 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 17, 6);
								#endif
							}
						}
						default:
						{
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 17, 7);
								AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] = ac_t;
							#else
								return ac_KickWithCode(playerid, "", 0, 17, 7);
							#endif
						}
					}
				}
				else AntiCheatInfo[playerid][acCheatCount][7] = 0;
			}
			AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]]--;
			if(AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]]
			< -32768) AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]] += 65536;
			else if(!AntiCheatInfo[playerid][acAmmo][ac_WeaponSlots[weaponid]]
			&& AntiCheatInfo[playerid][acSet][3] == weaponid) AntiCheatInfo[playerid][acSet][3] =
			AntiCheatInfo[playerid][acSetWeapon][ac_WeaponSlots[weaponid]] = -1;
		}
		AntiCheatInfo[playerid][acLastShot] = weaponid;
	}
	ac_i = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerWeaponShot
		ac_i = ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
	#endif
	AntiCheatInfo[playerid][acShotTime] = ac_gtc;
	if(ac_i)
	{
		if(ac_ur)
		{
			if(AntiCheatInfo[hitid][acArmour]) AntiCheatInfo[hitid][acDmgRes] = 2;
			else AntiCheatInfo[hitid][acDmgRes] = 1;
			AntiCheatInfo[hitid][acGtc][14] = ac_gtc;
		}
		if(ac_ur2)
		{
			AntiCheatInfo[AntiCheatVehInfo[hitid][acDriver]][acVehDmgRes] = true;
			AntiCheatInfo[AntiCheatVehInfo[hitid][acDriver]][acGtc][16] = ac_gtc;
		}
	}
	return ac_i;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerWeaponShot
		#undef OnPlayerWeaponShot
	#else
		#define _ALS_OnPlayerWeaponShot
	#endif
	#define OnPlayerWeaponShot ac_OnPlayerWeaponShot
	#if defined ac_OnPlayerWeaponShot
		forward ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnVehicleMod(playerid, vehicleid, componentid)
#else
	public OnVehicleMod(playerid, vehicleid, componentid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][12] + ac_Mtfc[12][0]) ac_FloodDetect(playerid, 12);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][12] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	if(AntiCheatInfo[playerid][acACAllow][23] && !AntiCheatInfo[playerid][acModShop])
	{
		#if defined OnCheatDetected
			ac_KickWithCode(playerid, "", 0, 23, 2);
		#else
			return ac_KickWithCode(playerid, "", 0, 23, 2);
		#endif
	}
	if(AntiCheatInfo[playerid][acACAllow][43]
	&& !ac_IsComponentidCompatible(GetVehicleModel(vehicleid),
	componentid)) return ac_KickWithCode(playerid, "", 0, 43, 1);
	if(AntiCheatInfo[playerid][acSet][13]
	!= -1) AntiCheatInfo[playerid][acSet][13] += ac_ComponentPrices[componentid - 1000];
	else AntiCheatInfo[playerid][acSet][13] = ac_ComponentPrices[componentid - 1000];
	AntiCheatInfo[playerid][acGtc][17] = AntiCheatInfo[playerid][acCall][27] =
	AntiCheatInfo[playerid][acCall][12] = ac_i;
	AntiCheatInfo[playerid][acCheatCount][12] = 0;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleMod
		return ac_OnVehicleMod(playerid, vehicleid, componentid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleMod
		#undef OnVehicleMod
	#else
		#define _ALS_OnVehicleMod
	#endif
	#define OnVehicleMod ac_OnVehicleMod
	#if defined ac_OnVehicleMod
		forward ac_OnVehicleMod(playerid, vehicleid, componentid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid)
#else
	public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][13] + ac_Mtfc[13][0]) ac_FloodDetect(playerid, 13);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][13] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	if(AntiCheatInfo[playerid][acACAllow][43] && !(-1 < paintjobid < 3)) ac_KickWithCode(playerid, "", 0, 43, 2);
	else if(AntiCheatInfo[playerid][acACAllow][23] && !AntiCheatInfo[playerid][acModShop]) ac_KickWithCode(playerid, "", 0, 23, 4);
	else AntiCheatVehInfo[vehicleid][acPaintJob] = paintjobid;
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][13] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehiclePaintjob
		return ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehiclePaintjob
		#undef OnVehiclePaintjob
	#else
		#define _ALS_OnVehiclePaintjob
	#endif
	#define OnVehiclePaintjob ac_OnVehiclePaintjob
	#if defined ac_OnVehiclePaintjob
		forward ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnVehicleRespray(playerid, vehicleid, color1, color2)
#else
	public OnVehicleRespray(playerid, vehicleid, color1, color2)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][14] + ac_Mtfc[14][0]) ac_FloodDetect(playerid, 14);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][14] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][14] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleRespray
		return ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleRespray
		#undef OnVehicleRespray
	#else
		#define _ALS_OnVehicleRespray
	#endif
	#define OnVehicleRespray ac_OnVehicleRespray
	#if defined ac_OnVehicleRespray
		forward ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnVehicleSpawn(vehicleid)
#else
	public OnVehicleSpawn(vehicleid)
#endif
{
	AntiCheatVehInfo[vehicleid][acPaintJob] = 3;
	AntiCheatVehInfo[vehicleid][acSpawned] = true;
	AntiCheatVehInfo[vehicleid][acHealth] = 1000.0;
	AntiCheatVehInfo[vehicleid][acSpeedDiff] =
	AntiCheatVehInfo[vehicleid][acPosDiff] =
	AntiCheatVehInfo[vehicleid][acVel][0] =
	AntiCheatVehInfo[vehicleid][acVel][1] =
	AntiCheatVehInfo[vehicleid][acVel][2] = 0.0;
	AntiCheatVehInfo[vehicleid][acDriver] = 65535;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleSpawn
		return ac_OnVehicleSpawn(vehicleid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleSpawn
		#undef OnVehicleSpawn
	#else
		#define _ALS_OnVehicleSpawn
	#endif
	#define OnVehicleSpawn ac_OnVehicleSpawn
	#if defined ac_OnVehicleSpawn
		forward ac_OnVehicleSpawn(vehicleid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnVehicleDeath(vehicleid, killerid)
#else
	public OnVehicleDeath(vehicleid, killerid)
#endif
{
	if(killerid != 65535)
	{
		new ac_i = GetTickCount();
		if(AntiCheatInfo[killerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[killerid][acCall][15] + ac_Mtfc[15][0]) ac_FloodDetect(killerid, 15);
			else if(ac_i < AntiCheatInfo[killerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(killerid, 27);
			else AntiCheatInfo[killerid][acFloodCount][15] = AntiCheatInfo[killerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[killerid][acCall][27] = AntiCheatInfo[killerid][acCall][15] = ac_i;
	}
	AntiCheatVehInfo[vehicleid][acSpawned] = false;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleDeath
		return ac_OnVehicleDeath(vehicleid, killerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleDeath
		#undef OnVehicleDeath
	#else
		#define _ALS_OnVehicleDeath
	#endif
	#define OnVehicleDeath ac_OnVehicleDeath
	#if defined ac_OnVehicleDeath
		forward ac_OnVehicleDeath(vehicleid, killerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerText(playerid, text[])
#else
	public OnPlayerText(playerid, text[])
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][16] + ac_Mtfc[16][0]) return ac_FloodDetect(playerid, 16);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][16] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][16] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerText
		return ac_OnPlayerText(playerid, text);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerText
		#undef OnPlayerText
	#else
		#define _ALS_OnPlayerText
	#endif
	#define OnPlayerText ac_OnPlayerText
	#if defined ac_OnPlayerText
		forward ac_OnPlayerText(playerid, text[]);
	#endif
#endif

#if defined OnPlayerEnterDynamicCP
	#if defined _inc_y_hooks || defined _INC_y_hooks
		#if defined STREAMER_ENABLE_TAGS
			Hook:ac_OnPlayerEnterDynamicCP(playerid, STREAMER_TAG_CP checkpointid)
		#else
			Hook:ac_OnPlayerEnterDynamicCP(playerid, checkpointid)
		#endif
	#else
		#if defined STREAMER_ENABLE_TAGS
			public OnPlayerEnterDynamicCP(playerid, STREAMER_TAG_CP checkpointid)
		#else
			public OnPlayerEnterDynamicCP(playerid, checkpointid)
		#endif
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][17] + ac_Mtfc[17][0]) return ac_FloodDetect(playerid, 17);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][17] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][17] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerEnterDynamicCP
			return ac_OnPlayerEnterDynamicCP(playerid, checkpointid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerEnterDynamicCP
			#undef OnPlayerEnterDynamicCP
		#else
			#define _ALS_OnPlayerEnterDynamicCP
		#endif
		#define OnPlayerEnterDynamicCP ac_OnPlayerEnterDynamicCP
		#if defined ac_OnPlayerEnterDynamicCP
			#if defined STREAMER_ENABLE_TAGS
				forward ac_OnPlayerEnterDynamicCP(playerid, STREAMER_TAG_CP checkpointid);
			#else
				forward ac_OnPlayerEnterDynamicCP(playerid, checkpointid);
			#endif
		#endif
	#endif
#else
	#if defined _inc_y_hooks || defined _INC_y_hooks
		Hook:ac_OnPlayerEnterCheckpoint(playerid)
	#else
		public OnPlayerEnterCheckpoint(playerid)
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][17] + ac_Mtfc[17][0]) return ac_FloodDetect(playerid, 17);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][17] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][17] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerEnterCheckpoint
			return ac_OnPlayerEnterCheckpoint(playerid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerEnterCheckpoint
			#undef OnPlayerEnterCheckpoint
		#else
			#define _ALS_OnPlayerEnterCheckpoint
		#endif
		#define OnPlayerEnterCheckpoint ac_OnPlayerEnterCheckpoint
		#if defined ac_OnPlayerEnterCheckpoint
			forward ac_OnPlayerEnterCheckpoint(playerid);
		#endif
	#endif
#endif

#if defined OnPlayerLeaveDynamicCP
	#if defined _inc_y_hooks || defined _INC_y_hooks
		#if defined STREAMER_ENABLE_TAGS
			Hook:ac_OnPlayerLeaveDynamicCP(playerid, STREAMER_TAG_CP checkpointid)
		#else
			Hook:ac_OnPlayerLeaveDynamicCP(playerid, checkpointid)
		#endif
	#else
		#if defined STREAMER_ENABLE_TAGS
			public OnPlayerLeaveDynamicCP(playerid, STREAMER_TAG_CP checkpointid)
		#else
			public OnPlayerLeaveDynamicCP(playerid, checkpointid)
		#endif
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][18] + ac_Mtfc[18][0]) return ac_FloodDetect(playerid, 18);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][18] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][18] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerLeaveDynamicCP
			return ac_OnPlayerLeaveDynamicCP(playerid, checkpointid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerLeaveDynamicCP
			#undef OnPlayerLeaveDynamicCP
		#else
			#define _ALS_OnPlayerLeaveDynamicCP
		#endif
		#define OnPlayerLeaveDynamicCP ac_OnPlayerLeaveDynamicCP
		#if defined ac_OnPlayerLeaveDynamicCP
			#if defined STREAMER_ENABLE_TAGS
				forward ac_OnPlayerLeaveDynamicCP(playerid, STREAMER_TAG_CP checkpointid);
			#else
				forward ac_OnPlayerLeaveDynamicCP(playerid, checkpointid);
			#endif
		#endif
	#endif
#else
	#if defined _inc_y_hooks || defined _INC_y_hooks
		Hook:ac_OnPlayerLeaveCheckpoint(playerid)
	#else
		public OnPlayerLeaveCheckpoint(playerid)
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][18] + ac_Mtfc[18][0]) return ac_FloodDetect(playerid, 18);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][18] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][18] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerLeaveCheckpoint
			return ac_OnPlayerLeaveCheckpoint(playerid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerLeaveCheckpoint
			#undef OnPlayerLeaveCheckpoint
		#else
			#define _ALS_OnPlayerLeaveCheckpoint
		#endif
		#define OnPlayerLeaveCheckpoint ac_OnPlayerLeaveCheckpoint
		#if defined ac_OnPlayerLeaveCheckpoint
			forward ac_OnPlayerLeaveCheckpoint(playerid);
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerRequestSpawn(playerid)
#else
	public OnPlayerRequestSpawn(playerid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][19] + ac_Mtfc[19][0]) return ac_FloodDetect(playerid, 19);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][19] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acSpawnWeapon][0] = ac_Class[AntiCheatInfo[playerid][acClassid]][0][0];
	AntiCheatInfo[playerid][acSpawnAmmo][0] = ac_Class[AntiCheatInfo[playerid][acClassid]][0][1];
	AntiCheatInfo[playerid][acSpawnWeapon][1] = ac_Class[AntiCheatInfo[playerid][acClassid]][1][0];
	AntiCheatInfo[playerid][acSpawnAmmo][1] = ac_Class[AntiCheatInfo[playerid][acClassid]][1][1];
	AntiCheatInfo[playerid][acSpawnWeapon][2] = ac_Class[AntiCheatInfo[playerid][acClassid]][2][0];
	AntiCheatInfo[playerid][acSpawnAmmo][2] = ac_Class[AntiCheatInfo[playerid][acClassid]][2][1];
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][19] = ac_i;
	ac_i = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerRequestSpawn
		ac_i = ac_OnPlayerRequestSpawn(playerid);
	#endif
	if(ac_i)
	{
		AntiCheatInfo[playerid][acSet][7] = 1;
		AntiCheatInfo[playerid][acSpawnRes]++;
	}
	return ac_i;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerRequestSpawn
		#undef OnPlayerRequestSpawn
	#else
		#define _ALS_OnPlayerRequestSpawn
	#endif
	#define OnPlayerRequestSpawn ac_OnPlayerRequestSpawn
	#if defined ac_OnPlayerRequestSpawn
		forward ac_OnPlayerRequestSpawn(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerExitedMenu(playerid)
#else
	public OnPlayerExitedMenu(playerid)
#endif
{
	if(!IsPlayerConnected(playerid)
	|| AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][20] + ac_Mtfc[20][0]) ac_FloodDetect(playerid, 20);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][20] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][20] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerExitedMenu
		return ac_OnPlayerExitedMenu(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerExitedMenu
		#undef OnPlayerExitedMenu
	#else
		#define _ALS_OnPlayerExitedMenu
	#endif
	#define OnPlayerExitedMenu ac_OnPlayerExitedMenu
	#if defined ac_OnPlayerExitedMenu
		forward ac_OnPlayerExitedMenu(playerid);
	#endif
#endif

#if defined OnPlayerEnterDynamicRaceCP
	#if defined _inc_y_hooks || defined _INC_y_hooks
		#if defined STREAMER_ENABLE_TAGS
			Hook:ac_OnPlayerEnterDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP checkpointid)
		#else
			Hook:ac_OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
		#endif
	#else
		#if defined STREAMER_ENABLE_TAGS
			public OnPlayerEnterDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP checkpointid)
		#else
			public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
		#endif
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][21] + ac_Mtfc[21][0]) return ac_FloodDetect(playerid, 21);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][21] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][21] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerEnterDynamicRaceCP
			return ac_OnPlayerEnterDynamicRaceCP(playerid, checkpointid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerEnterDynamicRaceCP
			#undef OnPlayerEnterDynamicRaceCP
		#else
			#define _ALS_OnPlayerEnterDynamicRaceCP
		#endif
		#define OnPlayerEnterDynamicRaceCP ac_OnPlayerEnterDynamicRaceCP
		#if defined ac_OnPlayerEnterDynamicRaceCP
			#if defined STREAMER_ENABLE_TAGS
				forward ac_OnPlayerEnterDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP checkpointid);
			#else
				forward ac_OnPlayerEnterDynamicRaceCP(playerid, checkpointid);
			#endif
		#endif
	#endif
#else
	#if defined _inc_y_hooks || defined _INC_y_hooks
		Hook:ac_OnPlayerEnterRaceCheckpoint(playerid)
	#else
		public OnPlayerEnterRaceCheckpoint(playerid)
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][21] + ac_Mtfc[21][0]) return ac_FloodDetect(playerid, 21);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][21] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][21] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerEnterRaceCheckpoint
			return ac_OnPlayerEnterRaceCheckpoint(playerid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerEnterRaceCheckpoin\
			|| defined _ALS_OnPlayerEnterRaceCP || defined _ALS_OnPlayer\
			EnterRaceCheckpoint
			#undef OnPlayerEnterRaceCheckpoint
		#else
			#define _ALS_OnPlayerEnterRaceCheckpoint
		#endif
		#define OnPlayerEnterRaceCheckpoint ac_OnPlayerEnterRaceCheckpoint
		#if defined ac_OnPlayerEnterRaceCheckpoint
			forward ac_OnPlayerEnterRaceCheckpoint(playerid);
		#endif
	#endif
#endif

#if defined OnPlayerLeaveDynamicRaceCP
	#if defined _inc_y_hooks || defined _INC_y_hooks
		#if defined STREAMER_ENABLE_TAGS
			Hook:ac_OnPlayerLeaveDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP checkpointid)
		#else
			Hook:ac_OnPlayerLeaveDynamicRaceCP(playerid, checkpointid)
		#endif
	#else
		#if defined STREAMER_ENABLE_TAGS
			public OnPlayerLeaveDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP checkpointid)
		#else
			public OnPlayerLeaveDynamicRaceCP(playerid, checkpointid)
		#endif
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][22] + ac_Mtfc[22][0]) return ac_FloodDetect(playerid, 22);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][22] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][22] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerLeaveDynamicRaceCP
			return ac_OnPlayerLeaveDynamicRaceCP(playerid, checkpointid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerLeaveDynamicRaceCP
			#undef OnPlayerLeaveDynamicRaceCP
		#else
			#define _ALS_OnPlayerLeaveDynamicRaceCP
		#endif
		#define OnPlayerLeaveDynamicRaceCP ac_OnPlayerLeaveDynamicRaceCP
		#if defined ac_OnPlayerLeaveDynamicRaceCP
			#if defined STREAMER_ENABLE_TAGS
				forward ac_OnPlayerLeaveDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP checkpointid);
			#else
				forward ac_OnPlayerLeaveDynamicRaceCP(playerid, checkpointid);
			#endif
		#endif
	#endif
#else
	#if defined _inc_y_hooks || defined _INC_y_hooks
		Hook:ac_OnPlayerLeaveRaceCheckpoint(playerid)
	#else
		public OnPlayerLeaveRaceCheckpoint(playerid)
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][22] + ac_Mtfc[22][0]) return ac_FloodDetect(playerid, 22);
			if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][22] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][22] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerLeaveRaceCheckpoint
			return ac_OnPlayerLeaveRaceCheckpoint(playerid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerLeaveRaceCheckpoin\
			|| defined _ALS_OnPlayerLeaveRaceCP || defined _ALS_OnPlayer\
			LeaveRaceCheckpoint
			#undef OnPlayerLeaveRaceCheckpoint
		#else
			#define _ALS_OnPlayerLeaveRaceCheckpoint
		#endif
		#define OnPlayerLeaveRaceCheckpoint ac_OnPlayerLeaveRaceCheckpoint
		#if defined ac_OnPlayerLeaveRaceCheckpoint
			forward ac_OnPlayerLeaveRaceCheckpoint(playerid);
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
#else
	public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][23] + ac_Mtfc[23][0]) return ac_FloodDetect(playerid, 23);
		if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][23] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][23] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickPlayerTextDraw
		return ac_OnPlayerClickPlayerTextDraw(playerid, playertextid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickPlayerTextDra\
		|| defined _ALS_OnPlayerClickPlayerTD || defined _ALS_OnPlayer\
		ClickPlayerTextDraw
		#undef OnPlayerClickPlayerTextDraw
	#else
		#define _ALS_OnPlayerClickPlayerTextDraw
	#endif
	#define OnPlayerClickPlayerTextDraw ac_OnPlayerClickPlayerTextDraw
	#if defined ac_OnPlayerClickPlayerTextDraw
		forward ac_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnVehicleDamageStatusUpdate(vehicleid, playerid)
#else
	public OnVehicleDamageStatusUpdate(vehicleid, playerid)
#endif
{
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][24] + ac_Mtfc[24][0]) ac_FloodDetect(playerid, 24);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][24] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][24] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleDamageStatusUpdate
		return ac_OnVehicleDamageStatusUpdate(vehicleid, playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleDamageStatusUpdat\
		|| defined _ALS_OnVehicleDamageStatusUpd || defined _ALS_OnVehicle\
		DamageStatusUpdate
		#undef OnVehicleDamageStatusUpdate
	#else
		#define _ALS_OnVehicleDamageStatusUpdate
	#endif
	#define OnVehicleDamageStatusUpdate ac_OnVehicleDamageStatusUpdate
	#if defined ac_OnVehicleDamageStatusUpdate
		forward ac_OnVehicleDamageStatusUpdate(vehicleid, playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate)
#else
	public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	new ac_i = GetTickCount();
	if(AntiCheatInfo[playerid][acACAllow][49])
	{
		if(ac_i < AntiCheatInfo[playerid][acCall][25] + ac_Mtfc[25][0]) ac_FloodDetect(playerid, 25);
		else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else AntiCheatInfo[playerid][acFloodCount][25] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
	}
	AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][25] = ac_i;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleSirenStateChange
		return ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleSirenStateChange
		#undef OnVehicleSirenStateChange
	#else
		#define _ALS_OnVehicleSirenStateChange
	#endif
	#define OnVehicleSirenStateChange ac_OnVehicleSirenStateChange
	#if defined ac_OnVehicleSirenStateChange
		forward ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
	#endif
#endif

#if defined OnPlayerSelectDynamicObject
	#if defined _inc_y_hooks || defined _INC_y_hooks
		Hook:ac_OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
	#else
		public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][26] + ac_Mtfc[26][0]) ac_FloodDetect(playerid, 26);
			else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][26] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][26] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerSelectDynamicObject
			return ac_OnPlayerSelectDynamicObject(playerid, objectid, modelid, x, y, z);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerSelectDynamicObjec\
			|| defined _ALS_OnPlayerSelectDynamicObj || defined _ALS_OnPlayer\
			SelectDynamicObject
			#undef OnPlayerSelectDynamicObject
		#else
			#define _ALS_OnPlayerSelectDynamicObject
		#endif
		#define OnPlayerSelectDynamicObject ac_OnPlayerSelectDynamicObject
		#if defined ac_OnPlayerSelectDynamicObject
			forward ac_OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z);
		#endif
	#endif
#else
	#if defined _inc_y_hooks || defined _INC_y_hooks
		Hook:ac_OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
	#else
		public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
	#endif
	{
		if(AntiCheatInfo[playerid][acKicked]) return 0;
		new ac_i = GetTickCount();
		if(AntiCheatInfo[playerid][acACAllow][49])
		{
			if(ac_i < AntiCheatInfo[playerid][acCall][26] + ac_Mtfc[26][0]) ac_FloodDetect(playerid, 26);
			else if(ac_i < AntiCheatInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else AntiCheatInfo[playerid][acFloodCount][26] = AntiCheatInfo[playerid][acFloodCount][27] = 0;
		}
		AntiCheatInfo[playerid][acCall][27] = AntiCheatInfo[playerid][acCall][26] = ac_i;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerSelectObject
			return ac_OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerSelectObject
			#undef OnPlayerSelectObject
		#else
			#define _ALS_OnPlayerSelectObject
		#endif
		#define OnPlayerSelectObject ac_OnPlayerSelectObject
		#if defined ac_OnPlayerSelectObject
			forward ac_OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ);
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
#else
	public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	static Float:ac_vposX, Float:ac_vposY, Float:ac_vposZ, Float:ac_vposD;
	GetVehiclePos(vehicleid, ac_vposX, ac_vposY, ac_vposZ);
	ac_vposD = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);
	if(passenger_seat)
	{
		static Float:ac_zdiff;
		ac_zdiff = new_z - ac_vposZ;
		if(AntiCheatInfo[playerid][acACAllow][31]
		&& (floatabs(vel_x) >= floatabs(AntiCheatVehInfo[vehicleid][acVel][0]) > 0.3
		|| floatabs(vel_y) >= floatabs(AntiCheatVehInfo[vehicleid][acVel][1]) > 0.3
		|| floatabs(vel_x - AntiCheatVehInfo[vehicleid][acVel][0]) > 25.0
		|| floatabs(vel_y - AntiCheatVehInfo[vehicleid][acVel][1]) > 25.0) && ac_zdiff > -5.0)
		{
			if(++AntiCheatInfo[playerid][acCheatCount][4] > AC_MAX_CARSHOT_WARNINGS)
			{
				#if defined OnCheatDetected
					ac_KickWithCode(playerid, "", 0, 31);
					AntiCheatInfo[playerid][acCheatCount][4] = 0;
				#else
					return ac_KickWithCode(playerid, "", 0, 31);
				#endif
			}
			#undef AC_MAX_CARSHOT_WARNINGS
		}
		else if(AntiCheatInfo[playerid][acACAllow][8] && vel_z >= 0.1 && vel_z
		> AntiCheatVehInfo[vehicleid][acVel][2] && floatabs(ac_vposX - new_x)
		< ac_zdiff * 1.2 && floatabs(ac_vposY - new_y) < ac_zdiff * 1.2)
		{
			if(++AntiCheatInfo[playerid][acCheatCount][3] > AC_MAX_FLYHACK_VEH_WARNINGS)
			{
				#if defined OnCheatDetected
					ac_KickWithCode(playerid, "", 0, 8, 2);
					AntiCheatInfo[playerid][acCheatCount][3] = 0;
				#else
					return ac_KickWithCode(playerid, "", 0, 8, 2);
				#endif
			}
			#undef AC_MAX_FLYHACK_VEH_WARNINGS
		}
		else AntiCheatInfo[playerid][acCheatCount][4] =
		AntiCheatInfo[playerid][acCheatCount][3] = 0;
	}
	if(AntiCheatInfo[playerid][acACAllow][5] && ac_vposD > 15.0 && ac_vposZ > -70.0
	&& ac_vposD > AntiCheatVehInfo[vehicleid][acPosDiff] + ((ac_vposD / 3) * 1.5))
	{
		#if defined OnCheatDetected
			ac_KickWithCode(playerid, "", 0, 5);
		#else
			GetVehicleZAngle(vehicleid, AntiCheatVehInfo[vehicleid][acZAngle]);
			SetVehicleZAngle(vehicleid, AntiCheatVehInfo[vehicleid][acZAngle]);
			SetVehiclePos(vehicleid, ac_vposX, ac_vposY, ac_vposZ);
			return 0;
		#endif
	}
	static ac_a;
	ac_a = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnUnoccupiedVehicleUpdate
		ac_a = ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
	#endif
	if(ac_a)
	{
		AntiCheatVehInfo[vehicleid][acSpeedDiff] =
		ac_GetSpeed(vel_x,vel_y,vel_z)
		- ac_GetSpeed(AntiCheatVehInfo[vehicleid][acVel][0],AntiCheatVehInfo[vehicleid][acVel][1],AntiCheatVehInfo[vehicleid][acVel][2]);
		AntiCheatVehInfo[vehicleid][acPosDiff] = ac_vposD;
		AntiCheatVehInfo[vehicleid][acVel][0] = vel_x;
		AntiCheatVehInfo[vehicleid][acVel][1] = vel_y;
		AntiCheatVehInfo[vehicleid][acVel][2] = vel_z;
	}
	return ac_a;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnUnoccupiedVehicleUpdate
		#undef OnUnoccupiedVehicleUpdate
	#else
		#define _ALS_OnUnoccupiedVehicleUpdate
	#endif
	#define OnUnoccupiedVehicleUpdate ac_OnUnoccupiedVehicleUpdate
	#if defined ac_OnUnoccupiedVehicleUpdate
		forward ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	Hook:ac_OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
#else
	public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
#endif
{
	if(AntiCheatInfo[playerid][acKicked]) return 0;
	if(AntiCheatInfo[playerid][acACAllow][46] && 383 < modelid < 394) return ac_KickWithCode(playerid, "", 0, 46);
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerEditAttachedObject
		return ac_OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerEditAttachedObject
		#undef OnPlayerEditAttachedObject
	#else
		#define _ALS_OnPlayerEditAttachedObject
	#endif
	#define OnPlayerEditAttachedObject ac_OnPlayerEditAttachedObject
	#if defined ac_OnPlayerEditAttachedObject
		forward ac_OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	#endif
#endif

ac_fpublic: ac_Timer(playerid)
{
	if(!IsPlayerConnected(playerid) || AntiCheatInfo[playerid][acKicked]) return 0;
	if(AntiCheatInfo[playerid][acACAllow][51] && NetStats_MessagesRecvPerSecond(playerid)
	> AC_MAX_MSGS_REC_DIFF) ac_KickWithCode(playerid, "", 0, 51);
	#undef AC_MAX_MSGS_REC_DIFF
	static ac_gtc, ac_gpp, bool:ac_ur;
	ac_gtc = GetTickCount();
	ac_ur = false;
	ac_gpp = GetPlayerPing(playerid) + 150;
	if(ac_gtc > AntiCheatInfo[playerid][acGtc][7] + ac_gpp)
	{
		for(new ac_i, ac_w, ac_a, bool:ac_cw,
		ac_s = ac_WeaponSlots[GetPlayerWeapon(playerid)]; ac_i < 13; ++ac_i)
		{
			GetPlayerWeaponData(playerid, ac_i, ac_w, ac_a);
			if(ac_w == 39) ac_cw = true;
			if(ac_s != ac_i)
			{
				if(AntiCheatInfo[playerid][acSetWeapon][ac_i] != -1)
				{
					if(AntiCheatInfo[playerid][acSetWeapon][ac_i] == ac_w)
					{
						AntiCheatInfo[playerid][acSetWeapon][ac_i] = -1;
						AntiCheatInfo[playerid][acWeapon][ac_i] = ac_w;
					}
					else if(AntiCheatInfo[playerid][acACAllow][52]
					&& ac_gtc > AntiCheatInfo[playerid][acGtcSetWeapon][ac_i] + ac_gpp
					&& ++AntiCheatInfo[playerid][acNOPCount][0] > AC_MAX_NOP_WARNINGS)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "GivePlayerWeapon");
						#endif
						ac_KickWithCode(playerid, "", 0, 52, 13);
						#if defined OnCheatDetected
							AntiCheatInfo[playerid][acSetWeapon][ac_i] = -1;
						#endif
					}
				}
				else
				{
					if(AntiCheatInfo[playerid][acWeapon][ac_i] != ac_w)
					{
						if(!ac_w || ac_w == 40 && ac_cw || ac_w == 46
						&& AntiCheatInfo[playerid][acVeh]
						&& AntiCheatInfo[playerid][acParachute])
						{
							AntiCheatInfo[playerid][acWeapon][ac_i] = ac_w;
							AntiCheatInfo[playerid][acAmmo][ac_i] = ac_a;
						}
						else if(-1 < AntiCheatInfo[playerid][acLastPickup] < MAX_PICKUPS
						&& AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon] == ac_w
						&& ac_a == ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon]]
						&& IsPlayerInRangeOfPoint(playerid, 5.0, AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acPos][0],
						AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acPos][1],
						AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acPos][2]))
						{
							AntiCheatInfo[playerid][acWeapon][ac_i] = ac_w;
							if(2 < ac_i < 6) AntiCheatInfo[playerid][acAmmo][ac_i] +=
							ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon]];
							else AntiCheatInfo[playerid][acAmmo][ac_i] =
							ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup]][acWeapon]];
						}
						else if(AntiCheatInfo[playerid][acLastPickup] > MAX_PICKUPS
						&& AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon] == ac_w
						&& ac_a == ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon]]
						&& IsPlayerInRangeOfPoint(playerid, 5.0, AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acPos][0],
						AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acPos][1],
						AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acPos][2]))
						{
							AntiCheatInfo[playerid][acWeapon][ac_i] = ac_w;
							if(2 < ac_i < 6) AntiCheatInfo[playerid][acAmmo][ac_i] +=
							ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon]];
							else AntiCheatInfo[playerid][acAmmo][ac_i] =
							ac_PickupAmmo[AntiCheatPickInfo[AntiCheatInfo[playerid][acLastPickup] - MAX_PICKUPS][acWeapon]];
						}
						else if(AntiCheatInfo[playerid][acACAllow][15] && !(15 < ac_w < 44 && !ac_a))
						{
							ac_KickWithCode(playerid, "", 0, 15, 2);
							#if defined OnCheatDetected
								AntiCheatInfo[playerid][acWeapon][ac_i] = ac_w;
								AntiCheatInfo[playerid][acAmmo][ac_i] = ac_a;
							#endif
						}
					}
					if(AntiCheatInfo[playerid][acGiveAmmo][ac_i] != -65535)
					{
						if(AntiCheatInfo[playerid][acGiveAmmo][ac_i] == ac_a)
						{
							AntiCheatInfo[playerid][acGiveAmmo][ac_i] = -65535;
							AntiCheatInfo[playerid][acAmmo][ac_i] = ac_a;
						}
						else if(AntiCheatInfo[playerid][acACAllow][52] && ac_gtc
						> AntiCheatInfo[playerid][acGtcGiveAmmo][ac_i] + ac_gpp)
						{
							if(++AntiCheatInfo[playerid][acNOPCount][1] > AC_MAX_NOP_WARNINGS)
							{
								#undef AC_MAX_NOP_WARNINGS
								#if defined DEBUG
									printf(DEBUG_CODE_5, playerid, "SetPlayerAmmo");
								#endif
								ac_KickWithCode(playerid, "", 0, 52, 14);
								#if defined OnCheatDetected
									AntiCheatInfo[playerid][acGiveAmmo][ac_i] = -65535;
								#endif
							}
						}
					}
					if(15 < ac_w < 44)
					{
						if(!ac_a) AntiCheatInfo[playerid][acAmmo][ac_i] = 0;
						else if(AntiCheatInfo[playerid][acACAllow][16] && (ac_w != 40 && ac_a
						> AntiCheatInfo[playerid][acAmmo][ac_i] || !AntiCheatInfo[playerid][acAmmo][ac_i]
						&& ac_a > AntiCheatInfo[playerid][acAmmo][ac_i] && AntiCheatInfo[playerid][acWeapon][8] != 39))
						{
							ac_KickWithCode(playerid, "", 0, 16, 2);
							#if defined OnCheatDetected
								AntiCheatInfo[playerid][acAmmo][ac_i] = ac_a;
							#endif
						}
					}
				}
			}
			else if(21 < ac_w < 33 || 40 < ac_w < 43
			|| !ac_LagCompMode && (15 < ac_w < 40 || ac_w == 43))
			{
				if(AntiCheatInfo[playerid][acACAllow][16]
				&& ac_a > AntiCheatInfo[playerid][acAmmo][ac_i]
				&& AntiCheatInfo[playerid][acGiveAmmo][ac_i] == -65535)
				{
					#if AC_USE_AMMUNATIONS
						if(21 < ac_w < 33 && !ac_ur && ac_IsPlayerInAmmuNation(playerid,
						GetPlayerInterior(playerid)) && ac_AmmuNationInfo[ac_w - 22][1]
						== ac_abs(ac_a - AntiCheatInfo[playerid][acAmmo][ac_i]))
						{
							if(AntiCheatInfo[playerid][acSet][10]
							!= -1) AntiCheatInfo[playerid][acSet][10] += ac_AmmuNationInfo[ac_w - 22][0];
							else AntiCheatInfo[playerid][acSet][10] = ac_AmmuNationInfo[ac_w - 22][0];
							AntiCheatInfo[playerid][acAmmo][ac_i] += ac_AmmuNationInfo[ac_w - 22][1];
							AntiCheatInfo[playerid][acCheatCount][10] = 0;
							ac_ur = true;
						}
						else
						{
					#endif
						if(!ac_LagCompMode)
						{
							ac_KickWithCode(playerid, "", 0, 16, 3);
							#if defined OnCheatDetected
								AntiCheatInfo[playerid][acAmmo][ac_i] = ac_a;
							#endif
						}
					#if AC_USE_AMMUNATIONS
						}
					#endif
					#undef ac_abs
				}
				else if(AntiCheatInfo[playerid][acAmmo][ac_i]
				&& !ac_LagCompMode) AntiCheatInfo[playerid][acAmmo][ac_i] = ac_a;
			}
		}
	}
	AntiCheatInfo[playerid][acCheatCount][1] =
	AntiCheatInfo[playerid][acCheatCount][2] = 0;
	if(ac_ur) AntiCheatInfo[playerid][acGtc][15] = ac_gtc;
	AntiCheatInfo[playerid][acTimerID] = SetTimerEx("ac_Timer", 1000, false, "i", playerid);
	return 1;
}

ac_fpublic: ac_OnCheatDetected(playerid, ip_address[], type, code)
{
	if(type) BlockIpAddress(ip_address, 0);
	else
	{
		switch(code)
		{
			case 40: SendClientMessage(playerid, AC_DEFAULT_COLOR, MAX_CONNECTS_MSG);
			case 41: SendClientMessage(playerid, AC_DEFAULT_COLOR, UNKNOWN_CLIENT_MSG);
			default:
			{
				new ac_strtmp[sizeof KICK_MSG];
				format(ac_strtmp, sizeof ac_strtmp, KICK_MSG, code);
				SendClientMessage(playerid, AC_DEFAULT_COLOR, ac_strtmp);
				#undef AC_DEFAULT_COLOR
			}
		}
		new ac_pping = GetPlayerPing(playerid) + 150;
		SetTimerEx("ac_KickTimer", (ac_pping > AC_MAX_PING ? AC_MAX_PING : ac_pping), false, "i", playerid);
		#undef AC_MAX_PING
		if(GetPlayerState(playerid) == 2) AntiCheatInfo[playerid][acKicked] = 2;
		else AntiCheatInfo[playerid][acKicked] = 1;
	}
	return 1;
}

ac_fpublic: ac_KickTimer(playerid) return Kick(playerid);

#undef ac_fpublic

stock EnableAntiCheat(acid, enable)
{
	if(!(-1 < acid < sizeof ac_ACAllow)) return 0;
	if(acid == 42)
	{
		if(enable)
		{
			if(!ac_ACAllow[acid])
			{
				#if !AC_USE_QUERY
					ac_QueryEnable = !!GetConsoleVarAsBool("query");
				#endif
				ac_RconEnable = !!GetConsoleVarAsBool("rcon");
			}
			#if !AC_USE_QUERY
				SendRconCommand("query 0");
			#endif
			SendRconCommand("rcon 0");
		}
		else
		{
			new ac_strtmp[9];
			#if !AC_USE_QUERY
				format(ac_strtmp, sizeof ac_strtmp, "query %b", ac_QueryEnable);
				SendRconCommand(ac_strtmp);
			#endif
			format(ac_strtmp, sizeof ac_strtmp, "rcon %b", ac_RconEnable);
			SendRconCommand(ac_strtmp);
		}
	}
	ac_ACAllow[acid] = !!enable;
	#if defined foreach
		foreach(new ac_i : Player)
	#else
		for(new ac_i = GetPlayerPoolSize(); ac_i != -1; --ac_i)
		{
			if(IsPlayerConnected(ac_i))
	#endif
	{
		AntiCheatInfo[ac_i][acACAllow][acid] = ac_ACAllow[acid];
		if(enable)
		{
			switch(acid)
			{
				case 8: AntiCheatInfo[ac_i][acCheatCount][3] = 0;
				case 17: AntiCheatInfo[ac_i][acCheatCount][7] = 0;
				case 26: AntiCheatInfo[ac_i][acCheatCount][14] =
				AntiCheatInfo[ac_i][acCheatCount][8] = 0;
				case 29: AntiCheatInfo[ac_i][acCheatCount][13] =
				AntiCheatInfo[ac_i][acCheatCount][6] = 0;
				case 34: AntiCheatInfo[ac_i][acCheatCount][5] = 0;
				case 38: AntiCheatInfo[ac_i][acCheatCount][0] = 0;
			}
		}
	}
	#if !defined foreach
		}
	#endif
	return 1;
}

stock EnableAntiCheatForPlayer(playerid, acid, enable)
{
	if(!IsPlayerConnected(playerid) || !(-1 < acid < sizeof ac_ACAllow)) return 0;
	AntiCheatInfo[playerid][acACAllow][acid] = !!enable;
	if(enable)
	{
		switch(acid)
		{
			case 8: AntiCheatInfo[playerid][acCheatCount][3] = 0;
			case 17: AntiCheatInfo[playerid][acCheatCount][7] = 0;
			case 26: AntiCheatInfo[playerid][acCheatCount][14] =
			AntiCheatInfo[playerid][acCheatCount][8] = 0;
			case 29: AntiCheatInfo[playerid][acCheatCount][13] =
			AntiCheatInfo[playerid][acCheatCount][6] = 0;
			case 34: AntiCheatInfo[playerid][acCheatCount][5] = 0;
			case 38: AntiCheatInfo[playerid][acCheatCount][0] = 0;
		}
	}
	return 1;
}

stock IsAntiCheatEnabled(acid)
{
	if(!(-1 < acid < sizeof ac_ACAllow)) return false;
	return ac_ACAllow[acid];
}

stock IsAntiCheatEnabledForPlayer(playerid, acid)
{
	if(!IsPlayerConnected(playerid) || !(-1 < acid < sizeof ac_ACAllow)) return false;
	return AntiCheatInfo[playerid][acACAllow][acid];
}

static stock ac_IsPlayerInRestaurant(playerid, interiorid)
{
	#if AC_USE_RESTAURANTS
		new ac_i;
		switch(interiorid)
		{
			case 5: ac_i = 0;
			case 9: ac_i = 1;
			case 10: ac_i = 2;
			default: return false;
		}
		return IsPlayerInRangeOfPoint(playerid, 2.5, ac_Restaurants[ac_i][0],
		ac_Restaurants[ac_i][1], ac_Restaurants[ac_i][2]);
	#else
		#pragma unused playerid, interiorid
		return false;
	#endif
	#undef AC_USE_RESTAURANTS
}

static stock ac_IsPlayerInAmmuNation(playerid, interiorid)
{
	#if AC_USE_AMMUNATIONS
		new ac_i, ac_s;
		switch(interiorid)
		{
			case 1: ac_i = 0, ac_s = -1;
			case 4: ac_i = 1, ac_s = 0;
			case 6: ac_i = 3, ac_s = 1;
			default: return false;
		}
		for(; ac_i != ac_s; --ac_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.5, ac_AmmuNations[ac_i][0],
			ac_AmmuNations[ac_i][1], ac_AmmuNations[ac_i][2])) return true;
		}
	#else
		#pragma unused playerid, interiorid
	#endif
	#undef AC_USE_AMMUNATIONS
	return false;
}

static stock ac_IsPlayerInPayNSpray(playerid, interiorid)
{
	#if AC_USE_PAYNSPRAY
		if(!interiorid)
		{
			for(new ac_i = sizeof(ac_PayNSpray) - 1; ac_i != -1; --ac_i)
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.5, ac_PayNSpray[ac_i][0],
				ac_PayNSpray[ac_i][1], ac_PayNSpray[ac_i][2])) return true;
			}
		}
	#else
		#pragma unused playerid, interiorid
	#endif
	#undef AC_USE_PAYNSPRAY
	return false;
}

static stock ac_IsPlayerNearVendingMachine(playerid, interiorid)
{
	#if AC_USE_VENDING_MACHINES
		new ac_i, ac_s;
		switch(interiorid)
		{
			case 0: ac_i = 44, ac_s = -1;
			case 1: ac_i = 51, ac_s = 44;
			case 2: ac_i = 52, ac_s = 51;
			case 3: ac_i = 58, ac_s = 52;
			case 6: ac_i = 60, ac_s = 58;
			case 7: ac_i = 61, ac_s = 60;
			case 15: ac_i = 62, ac_s = 61;
			case 16: ac_i = 65, ac_s = 62;
			case 17: ac_i = 72, ac_s = 65;
			case 18: ac_i = 74, ac_s = 72;
			default: return false;
		}
		for(; ac_i != ac_s; --ac_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, ac_VendingMachines[ac_i][0],
			ac_VendingMachines[ac_i][1], ac_VendingMachines[ac_i][2])) return true;
		}
	#else
		#pragma unused playerid, interiorid
	#endif
	#undef AC_USE_VENDING_MACHINES
	return false;
}

static stock ac_IsPlayerInCasino(playerid, interiorid)
{
	#if AC_USE_CASINOS
		new ac_i, ac_s;
		switch(interiorid)
		{
			case 1: ac_i = 41, ac_s = -1;
			case 10: ac_i = 61, ac_s = 41;
			case 12: ac_i = 70, ac_s = 61;
			default: return false;
		}
		for(; ac_i != ac_s; --ac_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, ac_Casinos[ac_i][3], ac_Casinos[ac_i][0],
			ac_Casinos[ac_i][1], ac_Casinos[ac_i][2])) return true;
		}
	#else
		#pragma unused playerid, interiorid
	#endif
	#undef AC_USE_CASINOS
	return false;
}

static ac_IsComponentidCompatible(modelid, componentid)
{
	if(modelid)
	{
		switch(componentid)
		{
			case 1000..1191:
			{
				componentid -= 1000;
				if(ac_VehicleMods[modelid - 400][componentid >>> 5]
				& (1 << (componentid & 0b00011111))) return true;
			}
			case 1192, 1193:
			{
				if(modelid == 576) return true;
			}
		}
	}
	return false;
}

static ac_IpToInt(const s_szIP[])
{
	new ac_aiBytes[1], ac_iPos;
	ac_aiBytes{0} = strval(s_szIP[ac_iPos]);
	while(ac_iPos < 15 && s_szIP[ac_iPos++] != '.'){}
	ac_aiBytes{1} = strval(s_szIP[ac_iPos]);
	while(ac_iPos < 15 && s_szIP[ac_iPos++] != '.'){}
	ac_aiBytes{2} = strval(s_szIP[ac_iPos]);
	while(ac_iPos < 15 && s_szIP[ac_iPos++] != '.'){}
	ac_aiBytes{3} = strval(s_szIP[ac_iPos]);
	return ac_aiBytes[0];
}

static ac_FloodDetect(playerid, publicid)
{
	if(!AntiCheatInfo[playerid][acKicked])
	{
		if(++AntiCheatInfo[playerid][acFloodCount][publicid] > ac_Mtfc[publicid][1])
		{
			#if defined DEBUG
				printf(DEBUG_CODE_1, playerid, ac_Mtfc[publicid][1], publicid);
				#undef DEBUG
			#endif
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 49, publicid);
				AntiCheatInfo[playerid][acFloodCount][publicid] =
				AntiCheatInfo[playerid][acFloodCount][27] = 0;
			#else
				return ac_KickWithCode(playerid, "", 0, 49, publicid);
			#endif
		}
		AntiCheatInfo[playerid][acCall][publicid] =
		AntiCheatInfo[playerid][acCall][27] = GetTickCount();
	}
	return 0;
}

static ac_KickWithCode(playerid, ip_address[], type, code, code2 = 0)
{
	if(!type && (!IsPlayerConnected(playerid)
	|| AntiCheatInfo[playerid][acKicked])
	|| !(-1 < code < sizeof ac_ACAllow)) return 0;
	ac_StatsInfo[5]++;
	switch(code)
	{
		case 0..35, 37, 39, 51: ac_StatsInfo[0]++;
		case 36, 38, 40, 41, 50: ac_StatsInfo[4]++;
		case 42: ac_StatsInfo[1]++;
		case 47..49: ac_StatsInfo[3]++;
		case 43..46: ac_StatsInfo[2]++;
	}
	new ac_strtmp[6];
	if(code2) format(ac_strtmp, sizeof ac_strtmp, " (%d)", code2);
	if(type) printf(SUSPICION_2, ip_address, code, ac_strtmp);
	else printf(SUSPICION_1, playerid, code, ac_strtmp);
	#if defined OnCheatDetected
		OnCheatDetected(playerid, ip_address, type, code);
	#else
		ac_OnCheatDetected(playerid, ip_address, type, code);
	#endif
	return 0;
}

static ac_LoadCfg()
{
	new ac_i, File:ac_cfgFile, ac_string[415], ac_strtmp[9];
	if(fexist(AC_CONFIG_FILE))
	{
		if((ac_cfgFile = fopen(AC_CONFIG_FILE, io_read)))
		{
			#if defined sscanf
				new ac_j;
			#endif
			while(fread(ac_cfgFile, ac_string))
			{
				#if defined sscanf
					sscanf(ac_string, "i'//'i", ac_j, ac_i);
					ac_ACAllow[ac_i] = !!ac_j;
				#else
					if((ac_i = strfind(ac_string, "//")) != -1)
					{
						strmid(ac_strtmp, ac_string, ac_i + 2, strlen(ac_string));
						if(-1 < (ac_i = strval(ac_strtmp)) < sizeof ac_ACAllow) ac_ACAllow[ac_i] = !!strval(ac_string);
					}
				#endif
			}
			fclose(ac_cfgFile);
		}
		else return 0;
	}
	else if((ac_cfgFile = fopen(AC_CONFIG_FILE, io_write)))
	{
		#undef AC_CONFIG_FILE
		for(; ac_i < sizeof ac_ACAllow; ++ac_i)
		{
			format(ac_strtmp, sizeof ac_strtmp, "%d //%d\r\n", ac_ACAllow[ac_i], ac_i);
			strcat(ac_string, ac_strtmp);
		}
		fwrite(ac_cfgFile, ac_string);
		fclose(ac_cfgFile);
	}
	else return 0;
	return 1;
}

#endif